{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What's OpenVeo Publish? OpenVeo Publish is an OpenVeo plugin. OpenVeo Publish adds the following features: The possibility to upload videos on: Vimeo Youtube Wowza local OpenVeo HTTP server TLS The possibility to manage synchronized multi-sources videos Back end pages: A page to manage the list of videos A page to create and organize video categories A page to create new video properties A page to edit the media (cut, chapters, tags) A page to configure the plugin A public page to play a video with images synchronization, chapters and tags Screenshots Back end catalogue Back end media editor Back end categories Back end video properties Public video with images synchronization","title":"INTRODUCTION"},{"location":"#whats-openveo-publish","text":"OpenVeo Publish is an OpenVeo plugin. OpenVeo Publish adds the following features: The possibility to upload videos on: Vimeo Youtube Wowza local OpenVeo HTTP server TLS The possibility to manage synchronized multi-sources videos Back end pages: A page to manage the list of videos A page to create and organize video categories A page to create new video properties A page to edit the media (cut, chapters, tags) A page to configure the plugin A public page to play a video with images synchronization, chapters and tags","title":"What's OpenVeo Publish?"},{"location":"#screenshots","text":"","title":"Screenshots"},{"location":"#back-end-catalogue","text":"","title":"Back end catalogue"},{"location":"#back-end-media-editor","text":"","title":"Back end media editor"},{"location":"#back-end-categories","text":"","title":"Back end categories"},{"location":"#back-end-video-properties","text":"","title":"Back end video properties"},{"location":"#public-video-with-images-synchronization","text":"","title":"Public video with images synchronization"},{"location":"advanced-configuration/","text":"Introduction Configuration files are all in user's directory under ~/.openveo/publish ~/.openveo/publish/publishConf.json ~/.openveo/publish/videoPlatformConf.json ~/.openveo/publish/watcherConf.json Nb : You must restart OpenVeo servers after modifications. Configure the plugin Open ~/.openveo/publish/publishConf.json { videoTmpDir : /tmp/videos , // Temporary directory to stock uploading videos (video is removed after the upload) maxConcurrentPublish : 3, // Maximum number of videos to upload simultaneously metadataFileName : .session // Name of the video metadata file in a tar package } Configure video platform credentials Open ~/.openveo/publish/videoPlatformConf.json { vimeo : { // Vimeo platform configuration clientId : vimeo client id (available on vimeo application page https://developer.vimeo.com/apps) , clientSecret : vimeo client secret (available on vimeo application page https://developer.vimeo.com/apps) , accessToken : vimeo access token (available on vimeo application page https://developer.vimeo.com/apps) }, youtube : { uploadMethod : uploadResumable , // (uploadResumable or uploadClassic; default: uploadResumable) googleOAuth : { clientId : Youtube API client Id (available in your Google Developper Console ) , clientSecret : Youtube API client secret (available in your Google Developper Console ) , redirectUrl : http://SERVER_HOST_NAME:SERVER_PORT/be/publish/configuration/googleOAuthAssosiation }, privacy : public // (public, private or unlisted; default: public) }, wowza :{ protocol : sftp , // (ftp, sftp, ftps) host : HOST , //server host where the video will be uploaded port : PORT , //server host port user : USERNAME , // server username pwd : PASSWORD , // server password vodFilePath : /files/ , // path where the video will be uploaded streamPath : https://HOST/APP_NAME // stream path exposed by wowza to access video, HOST and APP_NAME are defined in wowza }, local : { vodFilePath : /path/to/host/folder/ ,// path where the video will be uploaded on the local machine streamPath : stream/path/ //stream path exposed by local server relative to Openveo CDN to access the video }, tls : { nfsPath : /absolute/path/to/nfs/directory , // path of the directory shared with TLS mediaDirectoryPath : path/to/media/directory , // path of the directory holding medias (relative to nfsPath) accessToken : TLS access token , // access token to use to authenticate requests to TLS web service url : https://TLS_SERVER_HOST_NAME:TLS_SERVER_PORT/web/service/uri , // URL of the TLS web service certificate : /absolute/path/to/full/chain/certificate.crt // path to the full chain certificate if top authority is not part of system well known authorities } } To upload videos on Youtube , publish requires googleOAuth credentials. To upload videos on Wowza , you need to install lftp on your system. Configure the watcher Open ~/.openveo/publish/watcherConf.json { hotFolders : [ // List of folders to watch { type : vimeo , // Video platform to upload to for this hot folder (only local, vimeo, wowza or youtube is supported) path : /user/box/hot2 // Path to the hot folder }, { type : youtube , // Video platform to upload to for this hot folder (only local, vimeo, wowza or youtube is supported) path : /user/box/hot3 // Path to the hot folder }, { type : wowza , // Video platform to upload to for this hot folder (only local, vimeo, wowza or youtube is supported) path : /user/box/hot4 // Path to the hot folder }, { type : local , // Video platform to upload to for this hot folder (only local, vimeo, wowza or youtube is supported) path : /user/box/hot5 // Path to the hot folder }, { // No video platform specified: let user choose on which platform the video will be uploaded path : /user/box/hot1 // Path to the hot folder }, ... ] } Nb : If type is missing for a hot folder, videos won't be automatically uploaded to a platform. Videos can be uploaded to a platform from the catalogue of videos in the back end.","title":"Advanced configuration"},{"location":"advanced-configuration/#introduction","text":"Configuration files are all in user's directory under ~/.openveo/publish ~/.openveo/publish/publishConf.json ~/.openveo/publish/videoPlatformConf.json ~/.openveo/publish/watcherConf.json Nb : You must restart OpenVeo servers after modifications.","title":"Introduction"},{"location":"advanced-configuration/#configure-the-plugin","text":"Open ~/.openveo/publish/publishConf.json { videoTmpDir : /tmp/videos , // Temporary directory to stock uploading videos (video is removed after the upload) maxConcurrentPublish : 3, // Maximum number of videos to upload simultaneously metadataFileName : .session // Name of the video metadata file in a tar package }","title":"Configure the plugin"},{"location":"advanced-configuration/#configure-video-platform-credentials","text":"Open ~/.openveo/publish/videoPlatformConf.json { vimeo : { // Vimeo platform configuration clientId : vimeo client id (available on vimeo application page https://developer.vimeo.com/apps) , clientSecret : vimeo client secret (available on vimeo application page https://developer.vimeo.com/apps) , accessToken : vimeo access token (available on vimeo application page https://developer.vimeo.com/apps) }, youtube : { uploadMethod : uploadResumable , // (uploadResumable or uploadClassic; default: uploadResumable) googleOAuth : { clientId : Youtube API client Id (available in your Google Developper Console ) , clientSecret : Youtube API client secret (available in your Google Developper Console ) , redirectUrl : http://SERVER_HOST_NAME:SERVER_PORT/be/publish/configuration/googleOAuthAssosiation }, privacy : public // (public, private or unlisted; default: public) }, wowza :{ protocol : sftp , // (ftp, sftp, ftps) host : HOST , //server host where the video will be uploaded port : PORT , //server host port user : USERNAME , // server username pwd : PASSWORD , // server password vodFilePath : /files/ , // path where the video will be uploaded streamPath : https://HOST/APP_NAME // stream path exposed by wowza to access video, HOST and APP_NAME are defined in wowza }, local : { vodFilePath : /path/to/host/folder/ ,// path where the video will be uploaded on the local machine streamPath : stream/path/ //stream path exposed by local server relative to Openveo CDN to access the video }, tls : { nfsPath : /absolute/path/to/nfs/directory , // path of the directory shared with TLS mediaDirectoryPath : path/to/media/directory , // path of the directory holding medias (relative to nfsPath) accessToken : TLS access token , // access token to use to authenticate requests to TLS web service url : https://TLS_SERVER_HOST_NAME:TLS_SERVER_PORT/web/service/uri , // URL of the TLS web service certificate : /absolute/path/to/full/chain/certificate.crt // path to the full chain certificate if top authority is not part of system well known authorities } } To upload videos on Youtube , publish requires googleOAuth credentials. To upload videos on Wowza , you need to install lftp on your system.","title":"Configure video platform credentials"},{"location":"advanced-configuration/#configure-the-watcher","text":"Open ~/.openveo/publish/watcherConf.json { hotFolders : [ // List of folders to watch { type : vimeo , // Video platform to upload to for this hot folder (only local, vimeo, wowza or youtube is supported) path : /user/box/hot2 // Path to the hot folder }, { type : youtube , // Video platform to upload to for this hot folder (only local, vimeo, wowza or youtube is supported) path : /user/box/hot3 // Path to the hot folder }, { type : wowza , // Video platform to upload to for this hot folder (only local, vimeo, wowza or youtube is supported) path : /user/box/hot4 // Path to the hot folder }, { type : local , // Video platform to upload to for this hot folder (only local, vimeo, wowza or youtube is supported) path : /user/box/hot5 // Path to the hot folder }, { // No video platform specified: let user choose on which platform the video will be uploaded path : /user/box/hot1 // Path to the hot folder }, ... ] } Nb : If type is missing for a hot folder, videos won't be automatically uploaded to a platform. Videos can be uploaded to a platform from the catalogue of videos in the back end.","title":"Configure the watcher"},{"location":"getting-started/","text":"Installation From OpenVeo root: npm install @openveo/publish --production Nb : You will be prompted for some configuration. Don't worry if you made an error, you can edit configuration at anytime using advanced configuration . Start / Restart OpenVeo OpenVeo Publish is now installed. You can start / restart OpenVeo: node server.js Verify that Publish is working Log to the back end, you should see a new publish entry in the menu. Log to the back end You can now log to the back end to access Publish plugin administration pages.","title":"Getting started"},{"location":"getting-started/#installation","text":"From OpenVeo root: npm install @openveo/publish --production Nb : You will be prompted for some configuration. Don't worry if you made an error, you can edit configuration at anytime using advanced configuration .","title":"Installation"},{"location":"getting-started/#start-restart-openveo","text":"OpenVeo Publish is now installed. You can start / restart OpenVeo: node server.js","title":"Start / Restart OpenVeo"},{"location":"getting-started/#verify-that-publish-is-working","text":"Log to the back end, you should see a new publish entry in the menu.","title":"Verify that Publish is working"},{"location":"getting-started/#log-to-the-back-end","text":"You can now log to the back end to access Publish plugin administration pages.","title":"Log to the back end"},{"location":"player-parameters/","text":"Player URL parameters When embedding a video to your website using the share action from the catalog of videos you get the iframe code, something like this: iframe width= 768 height= 500 src= https://[my-name.openveo.com]/publish/video/KJaNpqGMd?fullscreen lang=en frameborder= 0 allowfullscreen webkitallowfullscreen mozallowfullscreen /iframe Looking at the URL in the src attribute we can see two parameters: fullscreen and lang Other parameters can be added to the URL, you can find the exhaustive list below. template Indicates the template to use when the video has slides. Could be either split_50_50 , split_1 , split_2 or split_25_75 (Default to split_50_50 if video has slides, split_1 otherwise) split_50_50 the video is displayed next to slides split_25_75 slides are bigger than the video split_1 only the video is displayed split_2 only the slides are displayed ?template=split_2 fullscreen Tells the OpenVeo Player to occupy the whole size of its parent element (Default to false ). ?fullscreen lang Player texts language (Default to en ) ?lang=en auto-play Indicates if player must automatically start when video is ready. (Default to false ) ?auto-play remember-position Indicates if player must automatically start at the time when the video has previously been stopped. (Default to true ) ?remember-position=false fullscreen-icon Indicates if fullscreen icon must be displayed or not (Default to true ). Note that even if this option is set to true, this icon can be hidden on devices/browsers without support for Javascript Fullscreen API. fullscreen-icon=false volume-icon Indicates if volume icon must be displayed or not (Default to true ). ?volume-icon=false template-icon Indicates if template selector icon must be displayed or not (Default to true ). ?template-icon=false settings-icon Indicates if settings icon must be displayed or not (Default to true ). ?settings-icon=false veo-labs-icon Indicates if Veo-Labs icon must be displayed or not (Default to true ). ?veo-labs-icon=false time Indicates if video time / duration must be displayed or not (Default to true ). ?time=false chapters Indicates if chapters must be displayed or not (Default to true ). ?chapters=false tags Indicates if tags must be displayed or not (Default to true ). ?tags=false cuts Indicates if cuts must be enabled or not (Default to true ). ?cuts=false t Indicates the time the player will start at in milliseconds (Default to 0 ). ?t=2000","title":"Player URL parameters"},{"location":"player-parameters/#player-url-parameters","text":"When embedding a video to your website using the share action from the catalog of videos you get the iframe code, something like this: iframe width= 768 height= 500 src= https://[my-name.openveo.com]/publish/video/KJaNpqGMd?fullscreen lang=en frameborder= 0 allowfullscreen webkitallowfullscreen mozallowfullscreen /iframe Looking at the URL in the src attribute we can see two parameters: fullscreen and lang Other parameters can be added to the URL, you can find the exhaustive list below.","title":"Player URL parameters"},{"location":"player-parameters/#template","text":"Indicates the template to use when the video has slides. Could be either split_50_50 , split_1 , split_2 or split_25_75 (Default to split_50_50 if video has slides, split_1 otherwise) split_50_50 the video is displayed next to slides split_25_75 slides are bigger than the video split_1 only the video is displayed split_2 only the slides are displayed ?template=split_2","title":"template"},{"location":"player-parameters/#fullscreen","text":"Tells the OpenVeo Player to occupy the whole size of its parent element (Default to false ). ?fullscreen","title":"fullscreen"},{"location":"player-parameters/#lang","text":"Player texts language (Default to en ) ?lang=en","title":"lang"},{"location":"player-parameters/#auto-play","text":"Indicates if player must automatically start when video is ready. (Default to false ) ?auto-play","title":"auto-play"},{"location":"player-parameters/#remember-position","text":"Indicates if player must automatically start at the time when the video has previously been stopped. (Default to true ) ?remember-position=false","title":"remember-position"},{"location":"player-parameters/#fullscreen-icon","text":"Indicates if fullscreen icon must be displayed or not (Default to true ). Note that even if this option is set to true, this icon can be hidden on devices/browsers without support for Javascript Fullscreen API. fullscreen-icon=false","title":"fullscreen-icon"},{"location":"player-parameters/#volume-icon","text":"Indicates if volume icon must be displayed or not (Default to true ). ?volume-icon=false","title":"volume-icon"},{"location":"player-parameters/#template-icon","text":"Indicates if template selector icon must be displayed or not (Default to true ). ?template-icon=false","title":"template-icon"},{"location":"player-parameters/#settings-icon","text":"Indicates if settings icon must be displayed or not (Default to true ). ?settings-icon=false","title":"settings-icon"},{"location":"player-parameters/#veo-labs-icon","text":"Indicates if Veo-Labs icon must be displayed or not (Default to true ). ?veo-labs-icon=false","title":"veo-labs-icon"},{"location":"player-parameters/#time","text":"Indicates if video time / duration must be displayed or not (Default to true ). ?time=false","title":"time"},{"location":"player-parameters/#chapters","text":"Indicates if chapters must be displayed or not (Default to true ). ?chapters=false","title":"chapters"},{"location":"player-parameters/#tags","text":"Indicates if tags must be displayed or not (Default to true ). ?tags=false","title":"tags"},{"location":"player-parameters/#cuts","text":"Indicates if cuts must be enabled or not (Default to true ). ?cuts=false","title":"cuts"},{"location":"player-parameters/#t","text":"Indicates the time the player will start at in milliseconds (Default to 0 ). ?t=2000","title":"t"},{"location":"prerequisites/","text":"OpenVeo Publish plugin requires : LFTP - Needed to upload videos on Wowza ImageMagick - Image Magick is used to dynamically generate derivated images (e.g. thumbs) FFMPEG - FFMPEG is used to extract information from incoming videos","title":"Prerequisites"},{"location":"watcher/","text":"Introduction The Watcher is capable of listening to some directories specified in plugin's configuration . Two types of files can be copied in these directories: tar files mp4 files Soon after the file has been copied, it will appear in back end catalogue page where all medias are referenced. tar files tar files are used for videos with synchronized images. A valid tar file must contain a video file , a .session file and a list of images . .session file .session file is used to store information about the package. It is written in JSON format and must contain at least: { filename : video.mp4 , // Name of the video file in the package indexes : [ // The list of indexes in the video { type : image , // Index type (could be image or tag ) timecode : 0, // Index time (in ms) from the beginning of the video data : { // Index data (only for image type) filename : slide_00000.jpeg // The name of the image file in the tar } }, { type : tag , // Index type (could be image or tag ) timecode : 3208 // Index time (in ms) from the beginning of the video }, ... ] } It can contain some optional properties: { date : 1425916390, // The date the video was recorded (in Unix epoch time) rich-media : true, // true to indicates that video has associated images ( indexes property must be present) indexes : [ // An array specifying a list of timecodes, their own type and data associated. { timecode : 0, // timecode in ms type : image , // timecode type (must be image or tag ) data : { // related information to image timecode filename : slide_00000.jpeg // filename of image timecode } }, { timecode : 9500, // timecode in ms type : tag , // timecode type (must be image or tag ) data : { // Optional - related information for tag timecode tagname : Very important moment // tagname to display, if not defined, will be replaced by 'Tag N' where N is the number of the tag } }, ... ] } \"indexes\" property is used to map each video timecode to an image or a tag and must be present if rich-media property is set to \"true\". In this example: at time 0ms , image slide_00000.jpeg will be displayed ( slide_00000.jpeg file must be present in the package) a chapter named \" Very important moment \" will be created and will redirect video at time 9500ms . Nb: All extra properties are kept but won't be used directly by Publish. synchro.xml file (DEPRECATED) The use of this file is deprecated. This file is used only if indexes information are not in .session file. synchro.xml file is used to map each images to a video timecode. If rich-media property is set to \"true\" in .session file, synchro.xml file must be present. It is written in XML format and must respect the following structure: ?xml version= 1.0 ? player !-- At time 0ms, image slide_00000.jpeg must be displayed (slide_00000.jpeg must be present in the package) -- synchro id= slide_00000.jpeg timecode= 0 / !-- At time 1400ms, image slide_00001.jpeg must be displayed (slide_00001.jpeg must be present in the package) -- synchro id= slide_00001.jpeg timecode= 1400 / !-- At time 9500ms, image slide_00002.jpeg must be displayed (slide_00002.jpeg must be present in the package) -- synchro id= slide_00002.jpeg timecode= 9500 / /player List of images A list of images to synchronize with the video as defined in .session file. Video file An mp4 file corresponding to the one specified by property filename in .session file. mp4 files If your video doesn't have associated images, a simple mp4 file will be enough.","title":"Watcher"},{"location":"watcher/#introduction","text":"The Watcher is capable of listening to some directories specified in plugin's configuration . Two types of files can be copied in these directories: tar files mp4 files Soon after the file has been copied, it will appear in back end catalogue page where all medias are referenced.","title":"Introduction"},{"location":"watcher/#tar-files","text":"tar files are used for videos with synchronized images. A valid tar file must contain a video file , a .session file and a list of images .","title":"tar files"},{"location":"watcher/#session-file","text":".session file is used to store information about the package. It is written in JSON format and must contain at least: { filename : video.mp4 , // Name of the video file in the package indexes : [ // The list of indexes in the video { type : image , // Index type (could be image or tag ) timecode : 0, // Index time (in ms) from the beginning of the video data : { // Index data (only for image type) filename : slide_00000.jpeg // The name of the image file in the tar } }, { type : tag , // Index type (could be image or tag ) timecode : 3208 // Index time (in ms) from the beginning of the video }, ... ] } It can contain some optional properties: { date : 1425916390, // The date the video was recorded (in Unix epoch time) rich-media : true, // true to indicates that video has associated images ( indexes property must be present) indexes : [ // An array specifying a list of timecodes, their own type and data associated. { timecode : 0, // timecode in ms type : image , // timecode type (must be image or tag ) data : { // related information to image timecode filename : slide_00000.jpeg // filename of image timecode } }, { timecode : 9500, // timecode in ms type : tag , // timecode type (must be image or tag ) data : { // Optional - related information for tag timecode tagname : Very important moment // tagname to display, if not defined, will be replaced by 'Tag N' where N is the number of the tag } }, ... ] } \"indexes\" property is used to map each video timecode to an image or a tag and must be present if rich-media property is set to \"true\". In this example: at time 0ms , image slide_00000.jpeg will be displayed ( slide_00000.jpeg file must be present in the package) a chapter named \" Very important moment \" will be created and will redirect video at time 9500ms . Nb: All extra properties are kept but won't be used directly by Publish.","title":".session file"},{"location":"watcher/#synchroxml-file-deprecated","text":"The use of this file is deprecated. This file is used only if indexes information are not in .session file. synchro.xml file is used to map each images to a video timecode. If rich-media property is set to \"true\" in .session file, synchro.xml file must be present. It is written in XML format and must respect the following structure: ?xml version= 1.0 ? player !-- At time 0ms, image slide_00000.jpeg must be displayed (slide_00000.jpeg must be present in the package) -- synchro id= slide_00000.jpeg timecode= 0 / !-- At time 1400ms, image slide_00001.jpeg must be displayed (slide_00001.jpeg must be present in the package) -- synchro id= slide_00001.jpeg timecode= 1400 / !-- At time 9500ms, image slide_00002.jpeg must be displayed (slide_00002.jpeg must be present in the package) -- synchro id= slide_00002.jpeg timecode= 9500 / /player","title":"synchro.xml file (DEPRECATED)"},{"location":"watcher/#list-of-images","text":"A list of images to synchronize with the video as defined in .session file.","title":"List of images"},{"location":"watcher/#video-file","text":"An mp4 file corresponding to the one specified by property filename in .session file.","title":"Video file"},{"location":"watcher/#mp4-files","text":"If your video doesn't have associated images, a simple mp4 file will be enough.","title":"mp4 files"},{"location":"developers/api/","text":"Server side API (Node.js) You can find Publish Plugin API here . Backend client side API (AngularJS) OpenVeo Publish backend API exposes an API (AngularJS components) to be used by other plugins.","title":"API"},{"location":"developers/api/#server-side-api-nodejs","text":"You can find Publish Plugin API here .","title":"Server side API (Node.js)"},{"location":"developers/api/#backend-client-side-api-angularjs","text":"OpenVeo Publish backend API exposes an API (AngularJS components) to be used by other plugins.","title":"Backend client side API (AngularJS)"},{"location":"developers/back-end/","text":"Introduction Publish back end pages are loaded by OpenVeo . As expected by OpenVeo, Publish defines an AngularJS module ov.publish . Modules Main module ( ov.publish ) Publish main module defines the following routes: /publish/medias-list to access the catalogue page /publish/media/:mediaId to access media edition page /publish/properties-list to access custom properties page /publish/categories-list to access categories page /publish/configuration to access publish configuration page Nb: Available services / filters defined in ov.publish module are described in the API .","title":"Back end AngularJS"},{"location":"developers/back-end/#introduction","text":"Publish back end pages are loaded by OpenVeo . As expected by OpenVeo, Publish defines an AngularJS module ov.publish .","title":"Introduction"},{"location":"developers/back-end/#modules","text":"","title":"Modules"},{"location":"developers/back-end/#main-module-ovpublish","text":"Publish main module defines the following routes: /publish/medias-list to access the catalogue page /publish/media/:mediaId to access media edition page /publish/properties-list to access custom properties page /publish/categories-list to access categories page /publish/configuration to access publish configuration page Nb: Available services / filters defined in ov.publish module are described in the API .","title":"Main module (ov.publish)"},{"location":"developers/basics/","text":"Player Publish uses OpenVeo Player to play a video with images synchronization. Entities Publish defines new entities: properties - Custom properties for videos videos - Videos","title":"Basics"},{"location":"developers/basics/#player","text":"Publish uses OpenVeo Player to play a video with images synchronization.","title":"Player"},{"location":"developers/basics/#entities","text":"Publish defines new entities: properties - Custom properties for videos videos - Videos","title":"Entities"},{"location":"developers/compilation/","text":"Introduction OpenVeo back end is written using AngularJS and SASS / Compass. SASS files need to be compiled to generate the CSS and JavaScript files can be minified and aggregated for better performance. OpenVeo does not automatically compile SASS and JavaScript files for his plugins. Thus OpenVeo Publish have to compile his own SASS and JavaScript files. Compiling SASS files You can compile the back end SASS files using the following command: grunt compass:dist Or you can watch SASS files changes using the following command: grunt Compiling JavaScript files You'll probably want to compile AngularJS files, in production, for better performance. You can do it using: grunt prod","title":"CSS / SASS / JS compilation"},{"location":"developers/compilation/#introduction","text":"OpenVeo back end is written using AngularJS and SASS / Compass. SASS files need to be compiled to generate the CSS and JavaScript files can be minified and aggregated for better performance. OpenVeo does not automatically compile SASS and JavaScript files for his plugins. Thus OpenVeo Publish have to compile his own SASS and JavaScript files.","title":"Introduction"},{"location":"developers/compilation/#compiling-sass-files","text":"You can compile the back end SASS files using the following command: grunt compass:dist Or you can watch SASS files changes using the following command: grunt","title":"Compiling SASS files"},{"location":"developers/compilation/#compiling-javascript-files","text":"You'll probably want to compile AngularJS files, in production, for better performance. You can do it using: grunt prod","title":"Compiling JavaScript files"},{"location":"developers/end-to-end-tests/","text":"Introduction End to end tests are performed using Protractor and run from OpenVeo core . You first have to install and configure tests as described in core's documentation. Write tests All end to end tests are located in tests/client/e2eTests/ . Suites are described in tests/client/protractorSuites.json . And the list of datas to create before launching tests are available in tests/client/e2eTests/database/data.json Launch publish end to end tests # Launch all publish end to end tests on chrome grunt test-e2e --capabilities=\"{\\\"browserName\\\": \\\"chrome\\\"}\" --directConnect=true --suite=\"publish\" # Launch all publish end to end tests on firefox grunt test-e2e --capabilities=\"{\\\"browserName\\\": \\\"firefox\\\"}\" --directConnect=true --suite=\"publish\"","title":"End to end tests"},{"location":"developers/end-to-end-tests/#introduction","text":"End to end tests are performed using Protractor and run from OpenVeo core . You first have to install and configure tests as described in core's documentation.","title":"Introduction"},{"location":"developers/end-to-end-tests/#write-tests","text":"All end to end tests are located in tests/client/e2eTests/ . Suites are described in tests/client/protractorSuites.json . And the list of datas to create before launching tests are available in tests/client/e2eTests/database/data.json","title":"Write tests"},{"location":"developers/end-to-end-tests/#launch-publish-end-to-end-tests","text":"# Launch all publish end to end tests on chrome grunt test-e2e --capabilities=\"{\\\"browserName\\\": \\\"chrome\\\"}\" --directConnect=true --suite=\"publish\" # Launch all publish end to end tests on firefox grunt test-e2e --capabilities=\"{\\\"browserName\\\": \\\"firefox\\\"}\" --directConnect=true --suite=\"publish\"","title":"Launch publish end to end tests"},{"location":"developers/installation/","text":"Installation To install OpenVeo Publish you first need to install OpenVeo Core if not already done. OpenVeo Core Install @openveo/core package # Move to your workspace directory cd /WORKSPACE_PATH # Create directory for OpenVeo core mkdir openveo-core # Install OpenVeo core in this directory # See OpenVeo core documentation for more information Your workspace should look like this: . \u251c\u2500\u2500 openveo-core Create NPM links for openveo-api and openveo-test In a classical NPM project @openveo/publish package should be installed in /WORKSPACE_PATH/openveo-core/node_modules/@openveo/publish. For development, the first thing which comes to mind is to create a clone of the OpenVeo Publish project inside this repository. But doing this will prevent npm install from working and will create a complicated development architecture with the risk to erase the repository at any time. We use NPM links to deal with this problem and store OpenVeo Publish inside /WORKSPACE_PATH/openveo-publish. But there is a catch. OpenVeo Publish needs both @openveo/api and @openveo/test of the core. As packages @openveo/publish and @openveo/core are installed in two different locations, package @openveo/publish won't find @openveo/api nor @openveo/test in its Node.JS path. That's why we have to create NPM links for both @openveo/api and @openveo/test and refer to it inside @openveo/publish. # Create a link for @openveo/api cd /WORKSPACE_PATH/openveo-core/node_modules/@openveo/api npm link # Create a link for @openveo/test cd /WORKSPACE_PATH/openveo-core/node_modules/@openveo/test npm link OpenVeo Publish Clone project from git # Clone project into workspace cd /WORKSPACE_PATH/ git clone git@github.com:veo-labs/openveo-publish.git Your workspace should look like this: . \u251c\u2500\u2500 openveo-core \u251c\u2500\u2500 openveo-publish Link openveo-api and openveo-test When installing OpenVeo Core we created NPM links for @openveo/api and @openveo/test. We can now refer to this links. # Install dependencies @openveo/api and @openveo/test using NPM links cd /WORKSPACE_PATH/openveo-publish npm link @openveo/api npm link @openveo/test Install project's dependencies cd /WORKSPACE_PATH/openveo-publish npm install Install plugin To be able to install @openveo/publish in @openveo/core we create an NPM link of @openveo/publish and refer to it in the core. Create an NPM link # Create a link for @openveo/publish cd /WORKSPACE_PATH/openveo-publish npm link Link project to the core # Install dependency @openveo/publish using NPM links cd /WORKSPACE_PATH/openveo-core npm link @openveo/publish","title":"Installation"},{"location":"developers/installation/#installation","text":"To install OpenVeo Publish you first need to install OpenVeo Core if not already done.","title":"Installation"},{"location":"developers/installation/#openveo-core","text":"","title":"OpenVeo Core"},{"location":"developers/installation/#install-openveocore-package","text":"# Move to your workspace directory cd /WORKSPACE_PATH # Create directory for OpenVeo core mkdir openveo-core # Install OpenVeo core in this directory # See OpenVeo core documentation for more information Your workspace should look like this: . \u251c\u2500\u2500 openveo-core","title":"Install @openveo/core package"},{"location":"developers/installation/#create-npm-links-for-openveo-api-and-openveo-test","text":"In a classical NPM project @openveo/publish package should be installed in /WORKSPACE_PATH/openveo-core/node_modules/@openveo/publish. For development, the first thing which comes to mind is to create a clone of the OpenVeo Publish project inside this repository. But doing this will prevent npm install from working and will create a complicated development architecture with the risk to erase the repository at any time. We use NPM links to deal with this problem and store OpenVeo Publish inside /WORKSPACE_PATH/openveo-publish. But there is a catch. OpenVeo Publish needs both @openveo/api and @openveo/test of the core. As packages @openveo/publish and @openveo/core are installed in two different locations, package @openveo/publish won't find @openveo/api nor @openveo/test in its Node.JS path. That's why we have to create NPM links for both @openveo/api and @openveo/test and refer to it inside @openveo/publish. # Create a link for @openveo/api cd /WORKSPACE_PATH/openveo-core/node_modules/@openveo/api npm link # Create a link for @openveo/test cd /WORKSPACE_PATH/openveo-core/node_modules/@openveo/test npm link","title":"Create NPM links for openveo-api and openveo-test"},{"location":"developers/installation/#openveo-publish","text":"","title":"OpenVeo Publish"},{"location":"developers/installation/#clone-project-from-git","text":"# Clone project into workspace cd /WORKSPACE_PATH/ git clone git@github.com:veo-labs/openveo-publish.git Your workspace should look like this: . \u251c\u2500\u2500 openveo-core \u251c\u2500\u2500 openveo-publish","title":"Clone project from git"},{"location":"developers/installation/#link-openveo-api-and-openveo-test","text":"When installing OpenVeo Core we created NPM links for @openveo/api and @openveo/test. We can now refer to this links. # Install dependencies @openveo/api and @openveo/test using NPM links cd /WORKSPACE_PATH/openveo-publish npm link @openveo/api npm link @openveo/test","title":"Link openveo-api and openveo-test"},{"location":"developers/installation/#install-projects-dependencies","text":"cd /WORKSPACE_PATH/openveo-publish npm install","title":"Install project's dependencies"},{"location":"developers/installation/#install-plugin","text":"To be able to install @openveo/publish in @openveo/core we create an NPM link of @openveo/publish and refer to it in the core.","title":"Install plugin"},{"location":"developers/installation/#create-an-npm-link","text":"# Create a link for @openveo/publish cd /WORKSPACE_PATH/openveo-publish npm link","title":"Create an NPM link"},{"location":"developers/installation/#link-project-to-the-core","text":"# Install dependency @openveo/publish using NPM links cd /WORKSPACE_PATH/openveo-core npm link @openveo/publish","title":"Link project to the core"},{"location":"developers/unit-tests/","text":"Node.js unit tests Server side unit tests are performed using Mocha and Chai . You can launch server unit tests with the following command: grunt mochaTest AngularJS unit tests Client side unit tests are performed using Karma . You can launch client unit tests with the following command: grunt karma","title":"Unit tests"},{"location":"developers/unit-tests/#nodejs-unit-tests","text":"Server side unit tests are performed using Mocha and Chai . You can launch server unit tests with the following command: grunt mochaTest","title":"Node.js unit tests"},{"location":"developers/unit-tests/#angularjs-unit-tests","text":"Client side unit tests are performed using Karma . You can launch client unit tests with the following command: grunt karma","title":"AngularJS unit tests"},{"location":"pluginsDevelopers/api/","text":"Server side API (Node.js) Actually, OpenVeo Publish does not expose any server side APIs. Backend client side API (AngularJS) OpenVeo Publish backend API exposes an API (AngularJS components) to be used by other plugins.","title":"API"},{"location":"pluginsDevelopers/api/#server-side-api-nodejs","text":"Actually, OpenVeo Publish does not expose any server side APIs.","title":"Server side API (Node.js)"},{"location":"pluginsDevelopers/api/#backend-client-side-api-angularjs","text":"OpenVeo Publish backend API exposes an API (AngularJS components) to be used by other plugins.","title":"Backend client side API (AngularJS)"},{"location":"pluginsDevelopers/web-service/","text":"Introduction OpenVeo Publish defines its own Web Service endpoints. Web Service authentication is documented in OpenVeo project. Endpoints Videos Get videos. GET WEB_SERVICE_URL/publish/videos Name Type Required Default Details query String No - To search on both videos title and description useSmartSearch Number No 1 1 to use a more advanced search mechanism, 0 to use a simple search based on a regular expression searchInPois Number No 0 1 to also search in tags / chapters titles and descriptions, 0 to search only on title and description of videos states String/Array No - To filter videos by state dateStart String/Number No - To get videos after or equal to a date (in any format supported by JavaScript Date object) dateEnd String/Number No - To get videos before or equal to a date (in any format supported by JavaScript Date object) categories String/Array No - To filter videos by category groups String/Array No - To filter videos by group user String/Array No - To filter videos by user sortBy String No date To sort videos by either title , description , date , state , views or category sortOrder String No desc Sort order (either asc or desc ) page Number No 0 The expected page limit Number No 10 To limit the number of videos per page properties Object No - A list of custom properties with the property id as the key and the expected property value as the value (e.g. properties[property1Id]=property1Value ) Date time properties accept either timestamps or literal dates include Array No - The list of fields to include from returned videos exclude Array No - The list of fields to exclude from returned videos. Ignored if include is also specified HTTP Status Code Details 200 Got the list of videos 500 An error occured on the server side 400 Wrong list of parameters 401 Authentication to the web service failed 403 Authorization forbidden for this end point { entities : [ { id : 1444396683105, // Id of the video state : 12, // Video state date : 1425916390000, // Date in timestamp type : vimeo , // Video associated platform errorCode : -1, // Video error code or -1 if no error category : , // Video category properties : { // Video custom properties 1444809111034 : { // Custom property id id : 1444809111034, // Custom property id name : Property name , // Custom property name description : Property description , // Custom property description type : text , // Custom property type value : Property value // Custom property value } ... }, link : http://openveo.local/publish/video/1444396683105 , // Path to play the video mediaId : 141902178 , // Video id on video platform available : true, // Indicates if video is available or is being encoded thumbnail : http://openveo-cdn.local/1444396683105/thumbnail.jpg , title : Video title , leadParagraph : Video lead paragraph , description : Video description , chapters : [ // Chapters { name : Chapter 1 , // Chapter name description : Chapter 1 , // Chapter description value : 0.04 // Chapter timecode in percent (percentage of the video) }, ... ], tags : [ // Tags { name : Tag 1 , // Tag name description : Tag 1 description , // Tag description value : 0.3, // Tag timecode in percent (percentage of the video) file : { // Tag associated file mimeType : video/mp4 , url : http://openveo-cdn.local/path/to/ressource/video.mp4 , originalName : original-name.mp4 , fileName : name.mp4 , size : 102458 } }, ... ], cut : [ // Cut information (begin and end) { type : begin , // Cut type value : 0 // Begin timecode (percentage of the media) }, { type : end , // Cut type value : 0.9 // End timecode (percentage of the media) } ], timecodes : [ // Video synchronized images { image : { large : http://openveo-cdn.local/1440175380631/slide_00000.jpeg , // Large image small : { url : http://openveo-cdn.local/1440175380631/points-of-interest-images.jpg , // Sprite containing the small image x : 0, // x coordinate of the small image inside the sprite y : 0 // y coordinate of the small image inside the sprite } }, timecode : 0 // Timecode when to display the image (in ms) }, ... ] } ], pagination : { limit : 1, page : 0, pages : 2, size : 2 } } Videos can be in different states: 0 : The video is on error 1 : The video is waiting to be treated 2 : The video is copying 3 : The video package is extracting 4 : The video package is validating 5 : The video package is preparing 6 : The video is waiting for manual upload 7 : The video is uploading to the video platform 8 : The video is being configured on the video platform 9 : The video timecodes are being saved 10 : The video synchronized images are being saved 11 : The video is uploaded and ready but unpublished 12 : The video is uploaded, ready and published 13 : The video thumbnail is generated 14 : The video metadatas are being retrieved 15 : The video is defragmenting Get a video. GET WEB_SERVICE_URL/publish/videos/{video_id} Name Type Required Default Details include Array No - The list of fields to include from returned video exclude Array No - The list of fields to exclude from returned video. Ignored if include is also specified HTTP Status Code Details 200 Got the video 500 An error occured on the server side 400 The id of the video is missing 401 Authentication to the web service failed 403 Authorization forbidden for this end point 404 Video not found { entity : { id : 1444396683105, // Id of the video state : 12, // Video state date : 1425916390000, // Date in timestamp type : vimeo , // Video associated platform errorCode : -1, // Video error code or -1 if no error category : , // Video category properties : { // Video custom properties 1444809111034 : { // Custom property id id : 1444809111034, // Custom property id name : Property name , // Custom property name description : Property description , // Custom property description type : text , // Custom property type value : Property value // Custom property value }, ... }, packageType : tar , // Initialize package type (either tar or mp4) link : http://openveo.local/publish/video/1444396683105 , // Path to play the video mediaId : 141902178 , // Video id on video platform available : true, // Indicates if video is available or is being encoded thumbnail : http://openveo-cdn.local//1444396683105/thumbnail.jpg , title : Video title , leadParagraph : Video lead paragraph , description : Video description , chapters : [ // Chapters { name : Chapter 1 , // Chapter name description : Chapter 1 , // Chapter description value : 0.04 // Chapter timecode in percent (percentage of the video) }, ... ], tags : [ // Tags { name : Tag 1 , // Tag name description : Tag 1 description , // Tag description value : 0.3, // Tag timecode in percent (percentage of the video) file : { // Tag associated file mimeType : video/mp4 , url : http://openveo-cdn.local/path/to/ressource/video.mp4 , originalName : original-name.mp4 , fileName : name.mp4 , size : 102458 } }, ... ], cut : [ // Cut information (begin and end) { type : begin , // Cut type value : 0 // Begin timecode (percentage of the media) }, { type : end , // Cut type value : 0.9 // End timecode (percentage of the media) } ], timecodes : [ // Video synchronized images { image : { large : http://openveo-cdn.local/1440175380631/slide_00000.jpeg , // Large image small : { url : http://openveo-cdn.local/1440175380631/points-of-interest-images.jpg , // Sprite containing the small image x : 0, // x coordinate of the small image inside the sprite y : 0 // y coordinate of the small image inside the sprite } }, timecode : 0 // Timecode when to display the image (in ms) }, ... ] } } Delete videos. DELETE WEB_SERVICE_URL/publish/videos/{video_id} With {video_id} a comma separated list of video ids to delete. HTTP Status Code Details 200 The videos have been deleted 500 An error occured on the server side 400 Missing the video ids 401 Authentication to the web service failed 403 Authorization forbidden for this end point { total : 42 } Add video. POST WEB_SERVICE_URL/publish/videos Expects a multipart/form-data body containing: Name Type Required Default Details file File Yes - The video file thumbnail File No - The video thumbnail info Object Yes - The video metadata info.title String Yes - The video title info.properties Object No - The custom properties of the video with the keys as custom property ids and values as custom property values info.category String No - The id of the category the video belongs to info.date String No - The date of the video (in any format supported by JavaScript Date object) info.leadParagraph String No - The video lead paragraph info.description String No - The video description info.groups Array No - The list of content groups (ids) the video belongs to info.platform String No - The platform to upload the file to. If no platform is specified the video will be in \" Waiting for upload \" state. Platform could be one of the platforms defined in videoPlatformConf.json configuration file (either vimeo , wowza , youtube or local ) info.user String No - The id of the OpenVeo user to use as the video owner (default is the super admin id) HTTP Status Code Details 200 The video has been added 500 An error occured on the server side 400 Missing body 401 Authentication to the web service failed 403 Authorization forbidden for this end point { id : 42 } Publish videos. POST WEB_SERVICE_URL/publish/videos/{video_id}/publish With {video_id} a comma separated list of video ids to publish. HTTP Status Code Details 200 The videos have been published 500 An error occured on the server side 400 Missing the video ids 401 Authentication to the web service failed 403 Authorization forbidden for this end point { total : 42 } Unpublish videos. POST WEB_SERVICE_URL/publish/videos/{video_id}/unpublish With {video_id} a comma separated list of video ids to unpublish. HTTP Status Code Details 200 The videos have been unpublished 500 An error occured on the server side 400 Missing the video ids 401 Authentication to the web service failed 403 Authorization forbidden for this end point { total : 42 } Properties Get custom properties. GET WEB_SERVICE_URL/publish/properties Name Type Required Default Details query String No - To search on both properties name and description useSmartSearch Number No 1 1 to use a more advanced search mechanism, 0 to use a simple search based on a regular expression types String/Array No - To filter properties by type sortBy String No name To sort properties by either name or description sortOrder String No desc Sort order (either asc or desc ) page Number No 0 The expected page limit Number No 10 To limit the number of properties per page include Array No - The list of fields to include from returned properties exclude Array No - The list of fields to exclude from returned properties. Ignored if include is also specified HTTP Status Code Details 200 Got the list of properties 500 An error occured on the server side 400 Wrong list of parameters 401 Authentication to the web service failed 403 Authorization forbidden for this end point { entities : [ { id : 4JMy6htjpe , name : Property name , description : Property description , type : text }, { id : 4JMy6htjpe , name : Property name , description : Property description , type : list , values : [ value1 , value2 ] } ], pagination : { limit : 1, page : 0, pages : 2, size : 2 } } Get a property. GET WEB_SERVICE_URL/publish/properties/{property_id} With {property_id} the id of the property to retrieve. Name Type Required Default Details include Array No - The list of fields to include from returned property exclude Array No - The list of fields to exclude from returned property. Ignored if include is also specified HTTP Status Code Details 200 Got the property 500 An error occured on the server side 400 The id of the property is missing 401 Authentication to the web service failed 403 Authorization forbidden for this end point 404 Property not found { entity : { id : NyiBTYjTe , name : Property name , description : Property description , type : text } } Get the list of properties types. GET WEB_SERVICE_URL/publish/propertiesTypes HTTP Status Code Details 200 Got the list of properties types { types : [ text , list , boolean ] } Add custom properties. PUT WEB_SERVICE_URL/publish/properties Expects an Array of objects containing: Name Type Required Default Details name String Yes - The custom property name description String Yes - The custom property description type String Yes - The custom property type (either text , list , or boolean ) values Array No - The custom property values if type is list HTTP Status Code Details 200 The properties have been added 500 An error occured on the server side 400 Wrong PUT parameters 401 Authentication to the web service failed 403 Authorization forbidden for this end point { entities : [ { id : 4JMy6htjpe , name : Property name , description : Property description , type : list , values : [ value1 , value2 ] }, ... ] } Update a property. POST WEB_SERVICE_URL/publish/properties/{property_id} With {property_id} the id of the property to update. Name Type Required Default Details name String No - The custom property name description String No - The custom property description type String No - The custom property type (either text , list , or boolean ) values Array No - The custom property values if type is list HTTP Status Code Details 200 The property has been updated 500 An error occured on the server side 400 Missing the property id 401 Authentication to the web service failed 403 Authorization forbidden for this end point { total : 1 } Delete properties. DELETE WEB_SERVICE_URL/publish/properties/{property_id} With {property_id} a comma separated list of property ids to delete. HTTP Status Code Details 200 The properties have been deleted 500 An error occured on the server side 400 Missing the property ids 401 Authentication to the web service failed 403 Authorization forbidden for this end point { total : 42 } Platforms Get configured video platforms. GET WEB_SERVICE_URL/publish/platforms HTTP Status Code Details 200 Got the platforms 500 An error occured on the server side 401 Authentication to the web service failed 403 Authorization forbidden for this end point { platforms : [ vimeo , youtube , local , tls , wowza ] }","title":"Web Service"},{"location":"pluginsDevelopers/web-service/#introduction","text":"OpenVeo Publish defines its own Web Service endpoints. Web Service authentication is documented in OpenVeo project.","title":"Introduction"},{"location":"pluginsDevelopers/web-service/#endpoints","text":"","title":"Endpoints"},{"location":"pluginsDevelopers/web-service/#videos","text":"Get videos. GET WEB_SERVICE_URL/publish/videos Name Type Required Default Details query String No - To search on both videos title and description useSmartSearch Number No 1 1 to use a more advanced search mechanism, 0 to use a simple search based on a regular expression searchInPois Number No 0 1 to also search in tags / chapters titles and descriptions, 0 to search only on title and description of videos states String/Array No - To filter videos by state dateStart String/Number No - To get videos after or equal to a date (in any format supported by JavaScript Date object) dateEnd String/Number No - To get videos before or equal to a date (in any format supported by JavaScript Date object) categories String/Array No - To filter videos by category groups String/Array No - To filter videos by group user String/Array No - To filter videos by user sortBy String No date To sort videos by either title , description , date , state , views or category sortOrder String No desc Sort order (either asc or desc ) page Number No 0 The expected page limit Number No 10 To limit the number of videos per page properties Object No - A list of custom properties with the property id as the key and the expected property value as the value (e.g. properties[property1Id]=property1Value ) Date time properties accept either timestamps or literal dates include Array No - The list of fields to include from returned videos exclude Array No - The list of fields to exclude from returned videos. Ignored if include is also specified HTTP Status Code Details 200 Got the list of videos 500 An error occured on the server side 400 Wrong list of parameters 401 Authentication to the web service failed 403 Authorization forbidden for this end point { entities : [ { id : 1444396683105, // Id of the video state : 12, // Video state date : 1425916390000, // Date in timestamp type : vimeo , // Video associated platform errorCode : -1, // Video error code or -1 if no error category : , // Video category properties : { // Video custom properties 1444809111034 : { // Custom property id id : 1444809111034, // Custom property id name : Property name , // Custom property name description : Property description , // Custom property description type : text , // Custom property type value : Property value // Custom property value } ... }, link : http://openveo.local/publish/video/1444396683105 , // Path to play the video mediaId : 141902178 , // Video id on video platform available : true, // Indicates if video is available or is being encoded thumbnail : http://openveo-cdn.local/1444396683105/thumbnail.jpg , title : Video title , leadParagraph : Video lead paragraph , description : Video description , chapters : [ // Chapters { name : Chapter 1 , // Chapter name description : Chapter 1 , // Chapter description value : 0.04 // Chapter timecode in percent (percentage of the video) }, ... ], tags : [ // Tags { name : Tag 1 , // Tag name description : Tag 1 description , // Tag description value : 0.3, // Tag timecode in percent (percentage of the video) file : { // Tag associated file mimeType : video/mp4 , url : http://openveo-cdn.local/path/to/ressource/video.mp4 , originalName : original-name.mp4 , fileName : name.mp4 , size : 102458 } }, ... ], cut : [ // Cut information (begin and end) { type : begin , // Cut type value : 0 // Begin timecode (percentage of the media) }, { type : end , // Cut type value : 0.9 // End timecode (percentage of the media) } ], timecodes : [ // Video synchronized images { image : { large : http://openveo-cdn.local/1440175380631/slide_00000.jpeg , // Large image small : { url : http://openveo-cdn.local/1440175380631/points-of-interest-images.jpg , // Sprite containing the small image x : 0, // x coordinate of the small image inside the sprite y : 0 // y coordinate of the small image inside the sprite } }, timecode : 0 // Timecode when to display the image (in ms) }, ... ] } ], pagination : { limit : 1, page : 0, pages : 2, size : 2 } } Videos can be in different states: 0 : The video is on error 1 : The video is waiting to be treated 2 : The video is copying 3 : The video package is extracting 4 : The video package is validating 5 : The video package is preparing 6 : The video is waiting for manual upload 7 : The video is uploading to the video platform 8 : The video is being configured on the video platform 9 : The video timecodes are being saved 10 : The video synchronized images are being saved 11 : The video is uploaded and ready but unpublished 12 : The video is uploaded, ready and published 13 : The video thumbnail is generated 14 : The video metadatas are being retrieved 15 : The video is defragmenting Get a video. GET WEB_SERVICE_URL/publish/videos/{video_id} Name Type Required Default Details include Array No - The list of fields to include from returned video exclude Array No - The list of fields to exclude from returned video. Ignored if include is also specified HTTP Status Code Details 200 Got the video 500 An error occured on the server side 400 The id of the video is missing 401 Authentication to the web service failed 403 Authorization forbidden for this end point 404 Video not found { entity : { id : 1444396683105, // Id of the video state : 12, // Video state date : 1425916390000, // Date in timestamp type : vimeo , // Video associated platform errorCode : -1, // Video error code or -1 if no error category : , // Video category properties : { // Video custom properties 1444809111034 : { // Custom property id id : 1444809111034, // Custom property id name : Property name , // Custom property name description : Property description , // Custom property description type : text , // Custom property type value : Property value // Custom property value }, ... }, packageType : tar , // Initialize package type (either tar or mp4) link : http://openveo.local/publish/video/1444396683105 , // Path to play the video mediaId : 141902178 , // Video id on video platform available : true, // Indicates if video is available or is being encoded thumbnail : http://openveo-cdn.local//1444396683105/thumbnail.jpg , title : Video title , leadParagraph : Video lead paragraph , description : Video description , chapters : [ // Chapters { name : Chapter 1 , // Chapter name description : Chapter 1 , // Chapter description value : 0.04 // Chapter timecode in percent (percentage of the video) }, ... ], tags : [ // Tags { name : Tag 1 , // Tag name description : Tag 1 description , // Tag description value : 0.3, // Tag timecode in percent (percentage of the video) file : { // Tag associated file mimeType : video/mp4 , url : http://openveo-cdn.local/path/to/ressource/video.mp4 , originalName : original-name.mp4 , fileName : name.mp4 , size : 102458 } }, ... ], cut : [ // Cut information (begin and end) { type : begin , // Cut type value : 0 // Begin timecode (percentage of the media) }, { type : end , // Cut type value : 0.9 // End timecode (percentage of the media) } ], timecodes : [ // Video synchronized images { image : { large : http://openveo-cdn.local/1440175380631/slide_00000.jpeg , // Large image small : { url : http://openveo-cdn.local/1440175380631/points-of-interest-images.jpg , // Sprite containing the small image x : 0, // x coordinate of the small image inside the sprite y : 0 // y coordinate of the small image inside the sprite } }, timecode : 0 // Timecode when to display the image (in ms) }, ... ] } } Delete videos. DELETE WEB_SERVICE_URL/publish/videos/{video_id} With {video_id} a comma separated list of video ids to delete. HTTP Status Code Details 200 The videos have been deleted 500 An error occured on the server side 400 Missing the video ids 401 Authentication to the web service failed 403 Authorization forbidden for this end point { total : 42 } Add video. POST WEB_SERVICE_URL/publish/videos Expects a multipart/form-data body containing: Name Type Required Default Details file File Yes - The video file thumbnail File No - The video thumbnail info Object Yes - The video metadata info.title String Yes - The video title info.properties Object No - The custom properties of the video with the keys as custom property ids and values as custom property values info.category String No - The id of the category the video belongs to info.date String No - The date of the video (in any format supported by JavaScript Date object) info.leadParagraph String No - The video lead paragraph info.description String No - The video description info.groups Array No - The list of content groups (ids) the video belongs to info.platform String No - The platform to upload the file to. If no platform is specified the video will be in \" Waiting for upload \" state. Platform could be one of the platforms defined in videoPlatformConf.json configuration file (either vimeo , wowza , youtube or local ) info.user String No - The id of the OpenVeo user to use as the video owner (default is the super admin id) HTTP Status Code Details 200 The video has been added 500 An error occured on the server side 400 Missing body 401 Authentication to the web service failed 403 Authorization forbidden for this end point { id : 42 } Publish videos. POST WEB_SERVICE_URL/publish/videos/{video_id}/publish With {video_id} a comma separated list of video ids to publish. HTTP Status Code Details 200 The videos have been published 500 An error occured on the server side 400 Missing the video ids 401 Authentication to the web service failed 403 Authorization forbidden for this end point { total : 42 } Unpublish videos. POST WEB_SERVICE_URL/publish/videos/{video_id}/unpublish With {video_id} a comma separated list of video ids to unpublish. HTTP Status Code Details 200 The videos have been unpublished 500 An error occured on the server side 400 Missing the video ids 401 Authentication to the web service failed 403 Authorization forbidden for this end point { total : 42 }","title":"Videos"},{"location":"pluginsDevelopers/web-service/#properties","text":"Get custom properties. GET WEB_SERVICE_URL/publish/properties Name Type Required Default Details query String No - To search on both properties name and description useSmartSearch Number No 1 1 to use a more advanced search mechanism, 0 to use a simple search based on a regular expression types String/Array No - To filter properties by type sortBy String No name To sort properties by either name or description sortOrder String No desc Sort order (either asc or desc ) page Number No 0 The expected page limit Number No 10 To limit the number of properties per page include Array No - The list of fields to include from returned properties exclude Array No - The list of fields to exclude from returned properties. Ignored if include is also specified HTTP Status Code Details 200 Got the list of properties 500 An error occured on the server side 400 Wrong list of parameters 401 Authentication to the web service failed 403 Authorization forbidden for this end point { entities : [ { id : 4JMy6htjpe , name : Property name , description : Property description , type : text }, { id : 4JMy6htjpe , name : Property name , description : Property description , type : list , values : [ value1 , value2 ] } ], pagination : { limit : 1, page : 0, pages : 2, size : 2 } } Get a property. GET WEB_SERVICE_URL/publish/properties/{property_id} With {property_id} the id of the property to retrieve. Name Type Required Default Details include Array No - The list of fields to include from returned property exclude Array No - The list of fields to exclude from returned property. Ignored if include is also specified HTTP Status Code Details 200 Got the property 500 An error occured on the server side 400 The id of the property is missing 401 Authentication to the web service failed 403 Authorization forbidden for this end point 404 Property not found { entity : { id : NyiBTYjTe , name : Property name , description : Property description , type : text } } Get the list of properties types. GET WEB_SERVICE_URL/publish/propertiesTypes HTTP Status Code Details 200 Got the list of properties types { types : [ text , list , boolean ] } Add custom properties. PUT WEB_SERVICE_URL/publish/properties Expects an Array of objects containing: Name Type Required Default Details name String Yes - The custom property name description String Yes - The custom property description type String Yes - The custom property type (either text , list , or boolean ) values Array No - The custom property values if type is list HTTP Status Code Details 200 The properties have been added 500 An error occured on the server side 400 Wrong PUT parameters 401 Authentication to the web service failed 403 Authorization forbidden for this end point { entities : [ { id : 4JMy6htjpe , name : Property name , description : Property description , type : list , values : [ value1 , value2 ] }, ... ] } Update a property. POST WEB_SERVICE_URL/publish/properties/{property_id} With {property_id} the id of the property to update. Name Type Required Default Details name String No - The custom property name description String No - The custom property description type String No - The custom property type (either text , list , or boolean ) values Array No - The custom property values if type is list HTTP Status Code Details 200 The property has been updated 500 An error occured on the server side 400 Missing the property id 401 Authentication to the web service failed 403 Authorization forbidden for this end point { total : 1 } Delete properties. DELETE WEB_SERVICE_URL/publish/properties/{property_id} With {property_id} a comma separated list of property ids to delete. HTTP Status Code Details 200 The properties have been deleted 500 An error occured on the server side 400 Missing the property ids 401 Authentication to the web service failed 403 Authorization forbidden for this end point { total : 42 }","title":"Properties"},{"location":"pluginsDevelopers/web-service/#platforms","text":"Get configured video platforms. GET WEB_SERVICE_URL/publish/platforms HTTP Status Code Details 200 Got the platforms 500 An error occured on the server side 401 Authentication to the web service failed 403 Authorization forbidden for this end point { platforms : [ vimeo , youtube , local , tls , wowza ] }","title":"Platforms"}]}