{
    "project": {
        "name": "OpenVeo Publish server",
        "description": "Node.js OpenVeo Publish plugin documentation",
        "version": "11.1.0"
    },
    "files": {
        "app/server/controllers/ConfigurationController.js": {
            "name": "app/server/controllers/ConfigurationController.js",
            "modules": {},
            "classes": {
                "ConfigurationController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/controllers/PropertyController.js": {
            "name": "app/server/controllers/PropertyController.js",
            "modules": {},
            "classes": {
                "PropertyController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/controllers/StatisticsController.js": {
            "name": "app/server/controllers/StatisticsController.js",
            "modules": {},
            "classes": {
                "StatisticsController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/controllers/VideoController.js": {
            "name": "app/server/controllers/VideoController.js",
            "modules": {},
            "classes": {
                "VideoController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/controllers/doc.js": {
            "name": "app/server/controllers/doc.js",
            "modules": {
                "controllers": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app/server/controllers/httpErrors.js": {
            "name": "app/server/controllers/httpErrors.js",
            "modules": {},
            "classes": {
                "HTTP_ERRORS": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/packages/Package.js": {
            "name": "app/server/packages/Package.js",
            "modules": {},
            "classes": {
                "Package": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/packages/PackageError.js": {
            "name": "app/server/packages/PackageError.js",
            "modules": {},
            "classes": {
                "PackageError": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/packages/TarPackage.js": {
            "name": "app/server/packages/TarPackage.js",
            "modules": {},
            "classes": {
                "TarPackage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/packages/TarPackageError.js": {
            "name": "app/server/packages/TarPackageError.js",
            "modules": {},
            "classes": {
                "TarPackageError": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/packages/VideoPackage.js": {
            "name": "app/server/packages/VideoPackage.js",
            "modules": {},
            "classes": {
                "VideoPackage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/packages/VideoPackageError.js": {
            "name": "app/server/packages/VideoPackageError.js",
            "modules": {},
            "classes": {
                "VideoPackageError": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/packages/doc.js": {
            "name": "app/server/packages/doc.js",
            "modules": {
                "packages": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app/server/packages/errors.js": {
            "name": "app/server/packages/errors.js",
            "modules": {},
            "classes": {
                "ERRORS": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/packages/packageFactory.js": {
            "name": "app/server/packages/packageFactory.js",
            "modules": {},
            "classes": {
                "factory": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/packages/states.js": {
            "name": "app/server/packages/states.js",
            "modules": {},
            "classes": {
                "STATES": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/providers/mediaPlatforms/tls/TlsClient.js": {
            "name": "app/server/providers/mediaPlatforms/tls/TlsClient.js",
            "modules": {},
            "classes": {
                "TlsClient": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/providers/mediaPlatforms/tls/TlsProvider.js": {
            "name": "app/server/providers/mediaPlatforms/tls/TlsProvider.js",
            "modules": {},
            "classes": {
                "TlsProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/providers/mediaPlatforms/youtube/GoogleOAuthHelper.js": {
            "name": "app/server/providers/mediaPlatforms/youtube/GoogleOAuthHelper.js",
            "modules": {},
            "classes": {
                "GoogleOAuthHelper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/providers/mediaPlatforms/youtube/YoutubeProvider.js": {
            "name": "app/server/providers/mediaPlatforms/youtube/YoutubeProvider.js",
            "modules": {},
            "classes": {
                "YoutubeProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/providers/mediaPlatforms/youtube/YoutubeResumableUpload.js": {
            "name": "app/server/providers/mediaPlatforms/youtube/YoutubeResumableUpload.js",
            "modules": {},
            "classes": {
                "ResumableUpload": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/providers/mediaPlatforms/LocalProvider.js": {
            "name": "app/server/providers/mediaPlatforms/LocalProvider.js",
            "modules": {},
            "classes": {
                "LocalProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/providers/mediaPlatforms/MediaPlatformProvider.js": {
            "name": "app/server/providers/mediaPlatforms/MediaPlatformProvider.js",
            "modules": {},
            "classes": {
                "MediaPlatformProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/providers/mediaPlatforms/VimeoProvider.js": {
            "name": "app/server/providers/mediaPlatforms/VimeoProvider.js",
            "modules": {},
            "classes": {
                "VimeoProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/providers/mediaPlatforms/WowzaProvider.js": {
            "name": "app/server/providers/mediaPlatforms/WowzaProvider.js",
            "modules": {},
            "classes": {
                "WowzaProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/providers/mediaPlatforms/factory.js": {
            "name": "app/server/providers/mediaPlatforms/factory.js",
            "modules": {},
            "classes": {
                "mediaPlatformFactory": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/providers/mediaPlatforms/types.js": {
            "name": "app/server/providers/mediaPlatforms/types.js",
            "modules": {},
            "classes": {
                "TYPES": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/providers/PoiProvider.js": {
            "name": "app/server/providers/PoiProvider.js",
            "modules": {},
            "classes": {
                "PoiProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/providers/PropertyProvider.js": {
            "name": "app/server/providers/PropertyProvider.js",
            "modules": {},
            "classes": {
                "PropertyProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/providers/VideoProvider.js": {
            "name": "app/server/providers/VideoProvider.js",
            "modules": {},
            "classes": {
                "VideoProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/providers/doc.js": {
            "name": "app/server/providers/doc.js",
            "modules": {
                "providers": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app/server/watcher/DirectoryFsWatcher.js": {
            "name": "app/server/watcher/DirectoryFsWatcher.js",
            "modules": {},
            "classes": {
                "DirectoryFsWatcher": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/watcher/DirectoryWatcher.js": {
            "name": "app/server/watcher/DirectoryWatcher.js",
            "modules": {},
            "classes": {
                "DirectoryWatcher": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/watcher/Watcher.js": {
            "name": "app/server/watcher/Watcher.js",
            "modules": {},
            "classes": {
                "Watcher": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/watcher/WatcherError.js": {
            "name": "app/server/watcher/WatcherError.js",
            "modules": {},
            "classes": {
                "WatcherError": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/watcher/doc.js": {
            "name": "app/server/watcher/doc.js",
            "modules": {
                "watcher": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app/server/PublishError.js": {
            "name": "app/server/PublishError.js",
            "modules": {},
            "classes": {
                "PublishError": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/PublishManager.js": {
            "name": "app/server/PublishManager.js",
            "modules": {},
            "classes": {
                "PublishManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/PublishPlugin.js": {
            "name": "app/server/PublishPlugin.js",
            "modules": {
                "publish": 1
            },
            "classes": {
                "PublishPlugin": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/PublishPluginApi.js": {
            "name": "app/server/PublishPluginApi.js",
            "modules": {},
            "classes": {
                "PublishPluginApi": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/hooks.js": {
            "name": "app/server/hooks.js",
            "modules": {},
            "classes": {
                "PUBLISH_HOOKS": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/listener.js": {
            "name": "app/server/listener.js",
            "modules": {},
            "classes": {
                "listener": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "controllers": {
            "name": "controllers",
            "submodules": {},
            "elements": {},
            "classes": {
                "ConfigurationController": 1,
                "PropertyController": 1,
                "StatisticsController": 1,
                "VideoController": 1,
                "HTTP_ERRORS": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "app/server/controllers/httpErrors.js",
            "line": 7,
            "description": "Include all plugin's controllers to handle HTTP or socket messages.",
            "itemtype": "main"
        },
        "packages": {
            "name": "packages",
            "submodules": {},
            "elements": {},
            "classes": {
                "Package": 1,
                "PackageError": 1,
                "TarPackage": 1,
                "TarPackageError": 1,
                "VideoPackage": 1,
                "VideoPackageError": 1,
                "ERRORS": 1,
                "factory": 1,
                "STATES": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "app/server/packages/states.js",
            "line": 7,
            "description": "All packages types which can be processed.",
            "itemtype": "main"
        },
        "providers": {
            "name": "providers",
            "submodules": {},
            "elements": {},
            "classes": {
                "TlsClient": 1,
                "TlsProvider": 1,
                "GoogleOAuthHelper": 1,
                "YoutubeProvider": 1,
                "ResumableUpload": 1,
                "LocalProvider": 1,
                "MediaPlatformProvider": 1,
                "VimeoProvider": 1,
                "WowzaProvider": 1,
                "mediaPlatformFactory": 1,
                "TYPES": 1,
                "PoiProvider": 1,
                "PropertyProvider": 1,
                "VideoProvider": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "app/server/providers/VideoProvider.js",
            "line": 18,
            "description": "All publish providers.",
            "itemtype": "main"
        },
        "watcher": {
            "name": "watcher",
            "submodules": {},
            "elements": {},
            "classes": {
                "DirectoryFsWatcher": 1,
                "DirectoryWatcher": 1,
                "Watcher": 1,
                "WatcherError": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "app/server/watcher/WatcherError.js",
            "line": 9,
            "description": "Defines a Watcher to be aware of new resources added to directories.",
            "itemtype": "main"
        },
        "publish": {
            "name": "publish",
            "submodules": {},
            "elements": {},
            "classes": {
                "PublishError": 1,
                "PublishManager": 1,
                "PublishPlugin": 1,
                "PublishPluginApi": 1,
                "PUBLISH_HOOKS": 1,
                "listener": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "app/server/listener.js",
            "line": 13,
            "description": "Defines the Publish Plugin that will be loaded by the core application.",
            "itemtype": "main"
        }
    },
    "classes": {
        "ConfigurationController": {
            "name": "ConfigurationController",
            "shortname": "ConfigurationController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controllers",
            "namespace": "",
            "file": "app/server/controllers/ConfigurationController.js",
            "line": 20,
            "description": "Defines a controller to handle actions relative to configuration's routes.",
            "extends": "Controller",
            "is_constructor": 1
        },
        "PropertyController": {
            "name": "PropertyController",
            "shortname": "PropertyController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controllers",
            "namespace": "",
            "file": "app/server/controllers/PropertyController.js",
            "line": 14,
            "description": "Defines a controller to handle actions relative to properties' routes.",
            "extends": "EntityController",
            "is_constructor": 1
        },
        "StatisticsController": {
            "name": "StatisticsController",
            "shortname": "StatisticsController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controllers",
            "namespace": "",
            "file": "app/server/controllers/StatisticsController.js",
            "line": 14,
            "description": "Defines a controller to handle actions relative to statistics' routes.",
            "extends": "Controller",
            "is_constructor": 1
        },
        "VideoController": {
            "name": "VideoController",
            "shortname": "VideoController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controllers",
            "namespace": "",
            "file": "app/server/controllers/VideoController.js",
            "line": 32,
            "description": "Defines a controller to handle actions relative to videos' routes.",
            "extends": "ContentController",
            "is_constructor": 1
        },
        "HTTP_ERRORS": {
            "name": "HTTP_ERRORS",
            "shortname": "HTTP_ERRORS",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controllers",
            "namespace": "",
            "file": "app/server/controllers/httpErrors.js",
            "line": 7,
            "description": "The list of HTTP errors with, for each error, its associated\nhexadecimal code and HTTP return code.\nHTTP errors are sent by controllers.",
            "example": [
                "\n    var HTTP_ERRORS = process.requirePublish('app/server/controllers/httpErrors.js');\n    console.log(HTTP_ERRORS.UNKNOWN_ERROR);"
            ],
            "static": 1
        },
        "Package": {
            "name": "Package",
            "shortname": "Package",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "packages",
            "namespace": "",
            "file": "app/server/packages/Package.js",
            "line": 44,
            "description": "Defines a Package to manage publication of a media file.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "mediaPackage",
                    "description": "Information about the media",
                    "type": "Object"
                },
                {
                    "name": "videoProvider",
                    "description": "Media provider",
                    "type": "VideoProvider"
                },
                {
                    "name": "poiProvider",
                    "description": "Points of interest provider",
                    "type": "PoiProvider"
                }
            ]
        },
        "PackageError": {
            "name": "PackageError",
            "shortname": "PackageError",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "packages",
            "namespace": "",
            "file": "app/server/packages/PackageError.js",
            "line": 9,
            "description": "Defines an error occurring in a package's processing.",
            "extends": "Error",
            "is_constructor": 1,
            "params": [
                {
                    "name": "message",
                    "description": "The error message",
                    "type": "String"
                },
                {
                    "name": "code",
                    "description": "The error code",
                    "type": "String"
                }
            ]
        },
        "TarPackage": {
            "name": "TarPackage",
            "shortname": "TarPackage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "packages",
            "namespace": "",
            "file": "app/server/packages/TarPackage.js",
            "line": 22,
            "description": "Defines a TarPackage to manage publication of a tar file.\n\nA tar file may contain :\n - A video file\n - A list of image files\n - A .session file describing the package content",
            "example": [
                "\n    // tar package object example\n    {\n      \"id\": \"13465465\", // Id of the package\n      \"type\": \"vimeo\", // Platform type\n      \"title\": \"2015-03-09_16-53-10_rich-media\", // Package title\n      \"originalPackagePath\": \"/tmp/2015-03-09_16-53-10_rich-media.tar\" // Package file\n    }",
                "\n    // \".session\" file example contained in a tar package\n    {\n      \"date\": 1425916390, // Unix epoch time of the video record\n      \"rich-media\": true, // true if package contains presentation images\n      \"filename\": \"video.mp4\", // The name of the video file in the package\n      \"duration\": 30, // Duration of the video in seconds\n      \"indexes\": [ // The list of indexes in the video\n        {\n          \"type\": \"image\", // Index type (could be \"image\" or \"tag\")\n          \"timecode\": 0, // Index time (in ms) from the beginning of the video\n          \"data\": { // Index data (only for \"image\" type)\n            \"filename\": \"slide_00000.jpeg\" // The name of the image file in the tar\n          }\n        },\n        {\n          \"type\": \"tag\", // Index type (could be \"image\" or \"tag\")\n          \"timecode\": 3208 // Index time (in ms) from the beginning of the video\n        },\n        ...\n      ]\n    }"
            ],
            "extends": "Package",
            "is_constructor": 1,
            "params": [
                {
                    "name": "mediaPackage",
                    "description": "The media description object",
                    "type": "Object"
                },
                {
                    "name": "videoProvider",
                    "description": "A video provider",
                    "type": "VideoProvider"
                },
                {
                    "name": "poiProvider",
                    "description": "Points of interest provider",
                    "type": "PoiProvider"
                }
            ]
        },
        "TarPackageError": {
            "name": "TarPackageError",
            "shortname": "TarPackageError",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "packages",
            "namespace": "",
            "file": "app/server/packages/TarPackageError.js",
            "line": 10,
            "description": "Defines an error occurring in a tar package's processing.",
            "extends": "PackageError",
            "is_constructor": 1,
            "params": [
                {
                    "name": "message",
                    "description": "The error message",
                    "type": "String"
                },
                {
                    "name": "code",
                    "description": "The error code",
                    "type": "String"
                }
            ]
        },
        "VideoPackage": {
            "name": "VideoPackage",
            "shortname": "VideoPackage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "packages",
            "namespace": "",
            "file": "app/server/packages/VideoPackage.js",
            "line": 26,
            "description": "Defines a VideoPackage to manage publication of a video file.",
            "extends": "Package",
            "is_constructor": 1,
            "params": [
                {
                    "name": "mediaPackage",
                    "description": "Information about the video",
                    "type": "Object"
                },
                {
                    "name": "videoProvider",
                    "description": "A video provider",
                    "type": "VideoProvider"
                },
                {
                    "name": "poiProvider",
                    "description": "Points of interest provider",
                    "type": "PoiProvider"
                }
            ]
        },
        "VideoPackageError": {
            "name": "VideoPackageError",
            "shortname": "VideoPackageError",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "packages",
            "namespace": "",
            "file": "app/server/packages/VideoPackageError.js",
            "line": 10,
            "description": "Defines an error occurring in a video package's processing.",
            "extends": "PackageError",
            "is_constructor": 1,
            "params": [
                {
                    "name": "message",
                    "description": "The error message",
                    "type": "String"
                },
                {
                    "name": "code",
                    "description": "The error code",
                    "type": "String"
                }
            ]
        },
        "ERRORS": {
            "name": "ERRORS",
            "shortname": "ERRORS",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "packages",
            "namespace": "",
            "file": "app/server/packages/errors.js",
            "line": 7,
            "description": "Defines the list of package publication errors.",
            "static": 1
        },
        "factory": {
            "name": "factory",
            "shortname": "factory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "packages",
            "namespace": "",
            "file": "app/server/packages/packageFactory.js",
            "line": 7,
            "description": "Defines the package factory.",
            "static": 1
        },
        "STATES": {
            "name": "STATES",
            "shortname": "STATES",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "packages",
            "namespace": "",
            "file": "app/server/packages/states.js",
            "line": 7,
            "description": "Defines the list of package publication states.",
            "static": 1
        },
        "TlsClient": {
            "name": "TlsClient",
            "shortname": "TlsClient",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "providers",
            "namespace": "",
            "file": "app/server/providers/mediaPlatforms/tls/TlsClient.js",
            "line": 10,
            "description": "Creates a client to connect to TLS web service.",
            "example": [
                "\n\n    const OpenVeoClient = require('@openveo/rest-nodejs-client').OpenVeoClient;\n    const client = new TlsClient(\n                'https://tls-web-service-host/path/to/web/service',\n                'access token',\n                '/absolute/path/to/full/chain/certificate.crt'\n    );"
            ],
            "extends": "RestClient",
            "is_constructor": 1,
            "params": [
                {
                    "name": "webServiceUrl",
                    "description": "The complete URL of the TLS web service",
                    "type": "String"
                },
                {
                    "name": "accessToken",
                    "description": "Access token to authenticate requests to the web service",
                    "type": "String"
                },
                {
                    "name": "certificate",
                    "description": "Absolute path to the web service full chain certificate file",
                    "type": "String",
                    "optional": true
                }
            ],
            "throws": {
                "description": "Thrown if either webServiceUrl or accessToken is not a valid String",
                "type": "TypeError"
            }
        },
        "TlsProvider": {
            "name": "TlsProvider",
            "shortname": "TlsProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "providers",
            "namespace": "",
            "file": "app/server/providers/mediaPlatforms/tls/TlsProvider.js",
            "line": 17,
            "description": "Defines a TlsProvider to interact with TLS platform.",
            "extends": "MediaPlatformProvider",
            "is_constructor": 1,
            "params": [
                {
                    "name": "providerConf",
                    "description": "TLS configuration",
                    "type": "Object",
                    "props": [
                        {
                            "name": "nfsPath",
                            "description": "The absolute path of the NFS directory shared with TLS",
                            "type": "String"
                        },
                        {
                            "name": "mediaDirectoryPath",
                            "description": "The path of the directory where to store TLS medias. This is\nrelative to nfsPath",
                            "type": "String"
                        },
                        {
                            "name": "accessToken",
                            "description": "The TLS API authentication token",
                            "type": "String"
                        },
                        {
                            "name": "url",
                            "description": "The TLS web service URL",
                            "type": "String"
                        },
                        {
                            "name": "certificate",
                            "description": "The absolute path of the full certificate chain if the top level\nauthority is not part of system well known authorities",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "GoogleOAuthHelper": {
            "name": "GoogleOAuthHelper",
            "shortname": "GoogleOAuthHelper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "providers",
            "namespace": "",
            "file": "app/server/providers/mediaPlatforms/youtube/GoogleOAuthHelper.js",
            "line": 16,
            "description": "Defines an helper for google OAuth association and requests.",
            "is_constructor": 1,
            "throws": {
                "description": "If configuration is missing",
                "type": "TypeError"
            }
        },
        "YoutubeProvider": {
            "name": "YoutubeProvider",
            "shortname": "YoutubeProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "providers",
            "namespace": "",
            "file": "app/server/providers/mediaPlatforms/youtube/YoutubeProvider.js",
            "line": 40,
            "description": "Defines a YoutubeProvider class to interact with [youtube platform](https://youtube.com/).",
            "extends": "MediaPlatformProvider",
            "is_constructor": 1,
            "params": [
                {
                    "name": "providerConf",
                    "description": "A youtube configuration object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "uploadMethod",
                            "description": "The upload method to use (see UPLOAD_METHODS)",
                            "type": "String"
                        },
                        {
                            "name": "privacy",
                            "description": "The media privacy on Youtube (see PRIVACY_STATUSES)",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "googleOAuthHelper",
                    "description": "The Google OAuth helper",
                    "type": "GoogleOAuthHelper"
                }
            ]
        },
        "ResumableUpload": {
            "name": "ResumableUpload",
            "shortname": "ResumableUpload",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "providers",
            "namespace": "",
            "file": "app/server/providers/mediaPlatforms/youtube/YoutubeResumableUpload.js",
            "line": 13,
            "description": "TODO",
            "is_constructor": 1
        },
        "LocalProvider": {
            "name": "LocalProvider",
            "shortname": "LocalProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "providers",
            "namespace": "",
            "file": "app/server/providers/mediaPlatforms/LocalProvider.js",
            "line": 14,
            "description": "Defines a LocalProvider class to interact with local platform.",
            "extends": "MediaPlatformProvider",
            "is_constructor": 1,
            "params": [
                {
                    "name": "providerConf",
                    "description": "Local configuration",
                    "type": "Object",
                    "props": [
                        {
                            "name": "vodFilePath",
                            "description": "The absolute directory path where to store medias",
                            "type": "String"
                        },
                        {
                            "name": "streamPath",
                            "description": "The URI of the media",
                            "type": "String"
                        }
                    ]
                }
            ]
        },
        "MediaPlatformProvider": {
            "name": "MediaPlatformProvider",
            "shortname": "MediaPlatformProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "providers",
            "namespace": "",
            "file": "app/server/providers/mediaPlatforms/MediaPlatformProvider.js",
            "line": 10,
            "description": "Defines a MediaPlatformProvider to interact with media platforms. Use factory to get an instance of the appropriate\nMediaPlatformProvider.",
            "extends": "EventEmitter",
            "is_constructor": 1,
            "params": [
                {
                    "name": "providerConf",
                    "description": "A media platform configuration object, it's structure depend on the provider's type, see\nextended objects for more information",
                    "type": "Object"
                }
            ]
        },
        "VimeoProvider": {
            "name": "VimeoProvider",
            "shortname": "VimeoProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "providers",
            "namespace": "",
            "file": "app/server/providers/mediaPlatforms/VimeoProvider.js",
            "line": 13,
            "description": "Defines a VimeoProvider class to interact with [vimeo platform](https://vimeo.com/).",
            "extends": "MediaPlatformProvider",
            "is_constructor": 1,
            "params": [
                {
                    "name": "providerConf",
                    "description": "A vimeo configuration object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "clientId",
                            "description": "Vimeo client id",
                            "type": "String"
                        },
                        {
                            "name": "clientSecret",
                            "description": "Vimeo client secret",
                            "type": "String"
                        },
                        {
                            "name": "accessToken",
                            "description": "Vimeo client access token",
                            "type": "String"
                        }
                    ]
                }
            ]
        },
        "WowzaProvider": {
            "name": "WowzaProvider",
            "shortname": "WowzaProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "providers",
            "namespace": "",
            "file": "app/server/providers/mediaPlatforms/WowzaProvider.js",
            "line": 14,
            "description": "Defines a WowzaProvider class to interact with [wowza platform](https://wowza.com/).",
            "extends": "MediaPlatformProvider",
            "is_constructor": 1,
            "params": [
                {
                    "name": "providerConf",
                    "description": "A wowza configuration object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "host",
                            "description": "Server host",
                            "type": "String"
                        },
                        {
                            "name": "user",
                            "description": "Wowza user",
                            "type": "String"
                        },
                        {
                            "name": "pwd",
                            "description": "Wowza user password",
                            "type": "String"
                        },
                        {
                            "name": "protocol",
                            "description": "Server protocol (ftp, frtp, sftp or ftps)",
                            "type": "String",
                            "optional": true,
                            "optdefault": "ftp"
                        },
                        {
                            "name": "port",
                            "description": "Server port",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "mediaPlatformFactory": {
            "name": "mediaPlatformFactory",
            "shortname": "mediaPlatformFactory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "providers",
            "namespace": "",
            "file": "app/server/providers/mediaPlatforms/factory.js",
            "line": 9,
            "description": "Defines a factory to create media platforms' providers.",
            "static": 1
        },
        "TYPES": {
            "name": "TYPES",
            "shortname": "TYPES",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "providers",
            "namespace": "",
            "file": "app/server/providers/mediaPlatforms/types.js",
            "line": 7,
            "description": "Defines the list of media platforms types.",
            "static": 1
        },
        "PoiProvider": {
            "name": "PoiProvider",
            "shortname": "PoiProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "providers",
            "namespace": "",
            "file": "app/server/providers/PoiProvider.js",
            "line": 14,
            "description": "Defines a PoiProvider to get and save points of interest.",
            "extends": "EntityProvider",
            "is_constructor": 1,
            "params": [
                {
                    "name": "database",
                    "description": "The database to interact with",
                    "type": "Database"
                }
            ]
        },
        "PropertyProvider": {
            "name": "PropertyProvider",
            "shortname": "PropertyProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "providers",
            "namespace": "",
            "file": "app/server/providers/PropertyProvider.js",
            "line": 12,
            "description": "Defines a PropertyProvider to get and save custom properties.",
            "extends": "EntityProvider",
            "is_constructor": 1,
            "params": [
                {
                    "name": "database",
                    "description": "The database to interact with",
                    "type": "Database"
                }
            ]
        },
        "VideoProvider": {
            "name": "VideoProvider",
            "shortname": "VideoProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "providers",
            "namespace": "",
            "file": "app/server/providers/VideoProvider.js",
            "line": 18,
            "description": "Defines a VideoProvider to get and save videos.",
            "extends": "EntityProvider",
            "is_constructor": 1,
            "params": [
                {
                    "name": "database",
                    "description": "The database to interact with",
                    "type": "Database"
                }
            ]
        },
        "DirectoryFsWatcher": {
            "name": "DirectoryFsWatcher",
            "shortname": "DirectoryFsWatcher",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "watcher",
            "namespace": "",
            "file": "app/server/watcher/DirectoryFsWatcher.js",
            "line": 34,
            "description": "Defines a directory watcher which is a wrapper around Node.js fs.watch.\n\nfs.watch only emit \"change\" and \"rename\" events, nothing more.\nThis class intends to make it more user friendly by emitting more understandable events like \"create\" or \"delete\".\n\nIt analyzes only \"rename\" events, \"change\" events are not constant between Linux and Windows systems.\nOn both Linux and Windows systems :\nWhen a file is added a \"rename\" event is emitted followed by a \"change\" event\nWhen a file is renamed a \"rename\" event is emitted twice (one for the removal and one for the addition)\nWhen a file is removed a \"rename\" event is emitted\n\nTo work through this behaviour, a snapshot of the directory is made each time a \"rename\" event is fired.\nThen new resources inside the directory are compared to the snapshot to find out which resource has been\nadded or removed.\n\nIf a \"rename\" event is emitted while the directory is being analyzed, directory will be analyzed again making every\n\"rename\" event count.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "directoryPath",
                    "description": "The absolute path of the directory to watch",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "Watcher options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "stabilityThreshold",
                            "description": "Number of milliseconds to wait before considering a file\nas stable",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "DirectoryWatcher": {
            "name": "DirectoryWatcher",
            "shortname": "DirectoryWatcher",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "watcher",
            "namespace": "",
            "file": "app/server/watcher/DirectoryWatcher.js",
            "line": 46,
            "description": "Defines a directory watcher to watch for changes inside a directory and its sub directories.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "directoryPath",
                    "description": "The absolute path of the directory to watch",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "Watcher options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "stabilityThreshold",
                            "description": "Number of milliseconds to wait before considering a file\nas stable",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Watcher": {
            "name": "Watcher",
            "shortname": "Watcher",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "watcher",
            "namespace": "",
            "file": "app/server/watcher/Watcher.js",
            "line": 43,
            "description": "Defines a watcher to be aware of new resources added to one or several directories.",
            "example": [
                "\n    // Create a new watcher\n    var watcher = new Watcher();\n\n    // Listen to watcher events\n    watcher.on('create', function(resourcePath) {\n      console.log('A new file has been added : ' + resourcePath);\n    });\n\n    watcher.on('delete', function(resourcePath) {\n      console.log('A file has been removed : ' + resourcePath);\n    });\n\n    watcher.on('watch', function(directoryPath) {\n      console.log('A watcher is now running for directory ' + directoryPath);\n    });\n\n    watcher.on('error', function(error) {\n      console.log(error);\n    });\n\n    // Ask watcher to watch directories\n    watcher.add([\n      '/tmp/hotFolder1',\n      '/tmp/hotFolder2',\n      '/tmp/hotFolder3'\n    ], function(results) {\n      console.log(results);\n    });\n\n    // Ask watcher to stop watching directories\n    watcher.remove([\n      '/tmp/hotFolder3'\n    ]);"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Watcher options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "stabilityThreshold",
                            "description": "Number of milliseconds to wait before considering a file\nas stable",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "WatcherError": {
            "name": "WatcherError",
            "shortname": "WatcherError",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "watcher",
            "namespace": "",
            "file": "app/server/watcher/WatcherError.js",
            "line": 9,
            "description": "Defines an error occurring while watching for directory changes.",
            "extends": "Error",
            "is_constructor": 1,
            "params": [
                {
                    "name": "message",
                    "description": "The error message",
                    "type": "String"
                },
                {
                    "name": "code",
                    "description": "The error code",
                    "type": "String"
                },
                {
                    "name": "directoryPath",
                    "description": "The absolute path of the directory in error",
                    "type": "String"
                }
            ]
        },
        "PublishError": {
            "name": "PublishError",
            "shortname": "PublishError",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "publish",
            "namespace": "",
            "file": "app/server/PublishError.js",
            "line": 9,
            "description": "Defines an error occurring in publish manager.",
            "extends": "Error",
            "is_constructor": 1,
            "params": [
                {
                    "name": "message",
                    "description": "The error message",
                    "type": "String"
                },
                {
                    "name": "code",
                    "description": "The error code",
                    "type": "String"
                }
            ]
        },
        "PublishManager": {
            "name": "PublishManager",
            "shortname": "PublishManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "publish",
            "namespace": "",
            "file": "app/server/PublishManager.js",
            "line": 56,
            "description": "Defines the PublishManager which handles the media publication's process.\n\nMedia publications are handled in parallel. Media publication's process can be\ndifferent regarding the type of the media.",
            "example": [
                "\n    var coreApi = process.api.getCoreApi();\n    var database = coreApi.getDatabase();\n    var PublishManager = process.requirePublish('app/server/PublishManager.js');\n    var videoProvider = new VideoProvider(database);\n    var publishManager = new PublishManager(videoProvider, 5);\n\n    // Listen publish manager's errors\n    publishManager.on('error', function(error) {\n      // Do something\n    });\n\n    // Listen to publish manager's end of processing for a media\n    publishManager.on('complete', function(mediaPackage){\n      // Do something\n    });\n\n    // Listen to publish manager's event informing that a media processing is retrying\n    publishManager.on('retry', function(mediaPackage) {\n      // Do something\n    });\n\n    // Listen to publish manager's event informing that a media, waiting for upload, starts uploading\n    publishManager.on('upload', function(mediaPackage) {\n      // Do something\n    });\n\n    publishManager.publish({\n      type: 'youtube', // The media platform to use for this media\n      originalPackagePath: '/home/openveo/medias/media-package.tar', // Path of the media package\n      originalFileName: 'media-package' // File name without extension\n    });"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "videoProvider",
                    "description": "The media provider",
                    "type": "VideoProvider"
                },
                {
                    "name": "maxConcurrentPackage",
                    "description": "The maximum number of medias to treat in parallel",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "3"
                }
            ]
        },
        "PublishPlugin": {
            "name": "PublishPlugin",
            "shortname": "PublishPlugin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "publish",
            "namespace": "",
            "file": "app/server/PublishPlugin.js",
            "line": 22,
            "description": "Defines the Publish Plugin that will be loaded by the core application.",
            "mainName": "publish",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "PublishPluginApi": {
            "name": "PublishPluginApi",
            "shortname": "PublishPluginApi",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "publish",
            "namespace": "",
            "file": "app/server/PublishPluginApi.js",
            "line": 11,
            "description": "Defines the Publish Plugin API exposed to other plugins.",
            "extends": "PluginApi",
            "is_constructor": 1
        },
        "PUBLISH_HOOKS": {
            "name": "PUBLISH_HOOKS",
            "shortname": "PUBLISH_HOOKS",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "publish",
            "namespace": "",
            "file": "app/server/hooks.js",
            "line": 7,
            "description": "Defines the list of hooks sent by publish.",
            "example": [
                "\n    var publishApi = process.api.getApi('publish');\n    var PUBLISH_HOOKS = publishApi.getHooks();\n    publishApi.registerAction(PUBLISH_HOOKS.PROPERTIES_DELETED, function(ids, callback) {\n      console.log(ids);\n      callback();\n    );"
            ],
            "static": 1
        },
        "listener": {
            "name": "listener",
            "shortname": "listener",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "publish",
            "namespace": "",
            "file": "app/server/listener.js",
            "line": 13,
            "description": "Sets event listeners on core and plugins.",
            "static": 1
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "app/server/controllers/ConfigurationController.js",
            "line": 34,
            "description": "Retrieves publish plugin configurations.",
            "itemtype": "method",
            "name": "getConfigurationAllAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request"
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "ConfigurationController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/ConfigurationController.js",
            "line": 136,
            "description": "Redirects action that will be called by google when the user associate our application,\na code will be in the parameters.",
            "itemtype": "method",
            "name": "handleGoogleOAuthCodeAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "query",
                            "description": "Request's query",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "code",
                                    "description": "Google authentication code",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "ConfigurationController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/ConfigurationController.js",
            "line": 161,
            "description": "Saves watcher settings.",
            "example": [
                "\n\n    // Response example\n    {\n      \"settings\" : {\n        \"owner\": ..., // The id of the owner that will be associated to medias uploaded through the watcher\n        \"group\": ... // The id of the content group that will be associated to medias uploaded through the watcher\n      },\n      \"total\": 1\n    }"
            ],
            "itemtype": "method",
            "name": "saveWatcherSettings",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "body",
                            "description": "Request's body",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "owner",
                                    "description": "The id of the owner for new uploaded medias",
                                    "type": "String"
                                },
                                {
                                    "name": "group",
                                    "description": "The id of the group for new uploaded medias",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "ConfigurationController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/ConfigurationController.js",
            "line": 223,
            "description": "Saves TLS settings.",
            "example": [
                "\n\n    // Response example\n    {\n      \"settings\" : {\n        \"properties\": ... // The list of custom property ids\n      },\n      \"total\": 1\n    }"
            ],
            "itemtype": "method",
            "name": "saveTlsSettingsAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "body",
                            "description": "Request's body",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "properties",
                                    "description": "The list of custom property ids",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "ConfigurationController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/ConfigurationController.js",
            "line": 330,
            "description": "Saves catalog settings.",
            "example": [
                "\n\n    // Response example\n    {\n      \"settings\" : {\n        \"refreshInterval\": 50 // The refresh interval in seconds\n      },\n      \"total\": 1\n    }"
            ],
            "itemtype": "method",
            "name": "saveCatalogSettingsAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "body",
                            "description": "Request's body",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "refreshInterval",
                                    "description": "The refresh interval in seconds",
                                    "type": "Number"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "ConfigurationController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/PropertyController.js",
            "line": 28,
            "description": "Gets the list of custom property types.",
            "itemtype": "method",
            "name": "getPropertyTypesAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request"
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "PropertyController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/PropertyController.js",
            "line": 43,
            "description": "Gets custom properties.",
            "example": [
                "\n\n    // Response example\n    {\n      \"entities\" : [ ... ],\n      \"pagination\" : {\n        \"limit\": ..., // The limit number of custom properties by page\n        \"page\": ..., // The actual page\n        \"pages\": ..., // The total number of pages\n        \"size\": ... // The total number of custom properties\n    }"
            ],
            "itemtype": "method",
            "name": "getEntitiesAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "query",
                            "description": "Request's query",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "include",
                                    "description": "The list of fields to include from returned properties",
                                    "type": "String|Array",
                                    "optional": true
                                },
                                {
                                    "name": "exclude",
                                    "description": "The list of fields to exclude from returned properties. Ignored if\ninclude is also specified.",
                                    "type": "String|Array",
                                    "optional": true
                                },
                                {
                                    "name": "query",
                                    "description": "Search query to search on both name and description",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "useSmartSearch",
                                    "description": "1 to use a more advanced search mechanism, 0 to use a simple search\nbased on a regular expression",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "1"
                                },
                                {
                                    "name": "types",
                                    "description": "To filter properties by type",
                                    "type": "Array",
                                    "optional": true
                                },
                                {
                                    "name": "page",
                                    "description": "The expected page",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "0"
                                },
                                {
                                    "name": "limit",
                                    "description": "The expected limit",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "10"
                                },
                                {
                                    "name": "sortBy",
                                    "description": "The field to sort properties by (either **name** or **description**)",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "\"name\""
                                },
                                {
                                    "name": "sortOrder",
                                    "description": "The sort order (either **asc** or **desc**)",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "\"desc\""
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "PropertyController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/PropertyController.js",
            "line": 141,
            "description": "Gets associated provider.",
            "itemtype": "method",
            "name": "getProvider",
            "return": {
                "description": "The provider associated to the controller",
                "type": "PropertyProvider"
            },
            "class": "PropertyController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/StatisticsController.js",
            "line": 28,
            "description": "Route statistics.\n\nCheck if stats ar available\nbefore executing the stat function.",
            "itemtype": "method",
            "name": "statisticsAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "params",
                            "description": "Request's parameters",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "entity",
                                    "description": "The entity type to work on (\"video\")",
                                    "type": "String"
                                },
                                {
                                    "name": "type",
                                    "description": "The statistic type to work on (\"views\")",
                                    "type": "String"
                                },
                                {
                                    "name": "id",
                                    "description": "The entity id",
                                    "type": "String"
                                }
                            ]
                        },
                        {
                            "name": "body",
                            "description": "Required for entity \"video\" and type \"views\"",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "count",
                                    "description": "Number to add to existing count (or to initialize)",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "StatisticsController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 46,
            "description": "Resolves medias resources urls using CDN url.\n\nMedias may have attached resources like files associated to tags, timecodes images, thumbnail image and\nso on. These resources must be accessible through an url. As all resources must, in the future, reside in\na CDN, resolveResourcesUrls transforms all resources URIs to URLs based on CDN.",
            "params": [
                {
                    "name": "medias",
                    "description": "The list of medias",
                    "type": "Array"
                }
            ],
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 117,
            "description": "Updates a point of interest associated to the given media.\n\nIf point of interest does not exist it is created.",
            "example": [
                "\n\n    // Response example\n    {\n      \"total\": 1,\n      \"poi\": ...\n    }"
            ],
            "itemtype": "method",
            "name": "updatePoiAction",
            "access": "private",
            "tagname": "",
            "async": 1,
            "params": [
                {
                    "name": "type",
                    "description": "The type of point of interest (either 'tags' or 'chapters')",
                    "type": "String"
                },
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "body",
                            "description": "Request multipart body",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "info",
                                    "description": "Point of interest information",
                                    "type": "Object",
                                    "optional": true
                                },
                                {
                                    "name": "info.value",
                                    "description": "The point of interest time in milliseconds",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "info.name",
                                    "description": "The point of interest name",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "info.description",
                                    "description": "The point of interest description",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "file",
                                    "description": "The multipart file associated to the point of interest",
                                    "type": "String",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "params",
                            "description": "Request's parameters",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "id",
                                    "description": "The media id the point of interest belongs to",
                                    "type": "String"
                                },
                                {
                                    "name": "poiid",
                                    "description": "The point of interest id",
                                    "type": "String",
                                    "optional": true
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 301,
            "description": "Removes points of interest from a media.",
            "example": [
                "\n\n    // Response example\n    {\n      \"total\": 1\n    }"
            ],
            "itemtype": "method",
            "name": "removePoisAction",
            "async": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "type",
                    "description": "The type of points of interest (either 'tags' or 'chapters')",
                    "type": "String"
                },
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "params",
                            "description": "Request parameters",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "id",
                                    "description": "The media id",
                                    "type": "String"
                                },
                                {
                                    "name": "poiids",
                                    "description": "A comma separated list of points of interest ids to remove",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 404,
            "description": "Replaces media chapters ids and tags ids by detailed points of interest.",
            "itemtype": "method",
            "name": "populateMediaWithPois",
            "async": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "media",
                    "description": "The media to populate",
                    "type": "Object",
                    "props": [
                        {
                            "name": "chapters",
                            "description": "The media chapters",
                            "type": "Array"
                        },
                        {
                            "name": "tags",
                            "description": "The media tags",
                            "type": "Array"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "Function to call when media has been populated",
                    "type": "Function"
                }
            ],
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 454,
            "description": "Updates the given media with corresponding information from its video platform.\n\nIf information from the video platform have already been fetched for this media this does nothing.",
            "itemtype": "method",
            "name": "updateMediaWithPlatformInfo",
            "async": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "media",
                    "description": "The media to update",
                    "type": "Object",
                    "props": [
                        {
                            "name": "id",
                            "description": "The media id",
                            "type": "String"
                        },
                        {
                            "name": "type",
                            "description": "The id of the associated media platform",
                            "type": "String"
                        },
                        {
                            "name": "mediaId",
                            "description": "The list of medias in the media platform. Could have several media ids if media has\nmultiple sources",
                            "type": "Array"
                        },
                        {
                            "name": "available",
                            "description": "true if the media is available, false otherwise, if true information from the video\nplatform have already been fetched then this does nothing",
                            "type": "Boolan"
                        },
                        {
                            "name": "sources",
                            "description": "The list of media sources",
                            "type": "Array"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "Function to call when media has been updated",
                    "type": "Function"
                }
            ],
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 508,
            "description": "Displays video player template.\n\nChecks first if the video id is valid and if the video is published\nbefore returning the template.",
            "itemtype": "method",
            "name": "displayVideoAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request"
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 566,
            "description": "Gets all media platforms available.",
            "example": [
                "\n    {\n      \"platforms\" : [\n        ...\n      ]\n    }"
            ],
            "itemtype": "method",
            "name": "getPlatformsAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request"
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 590,
            "description": "Gets a ready media.\n\nA ready media is a media with a state set to ready or published.\nConnected users may have access to ready medias but unconnected users can only access published medias.",
            "example": [
                "\n\n    // Response example\n    {\n      \"entity\" : {\n        \"id\": ..., // The media id\n        \"state\": ..., // The media state\n        \"date\": ..., // The media published date as a timestamp\n        \"type\": ..., // The video associated platform\n        \"errorCode\": ..., // The media error code or -1 if no error\n        \"category\": ..., // The media category\n        \"properties\": {...}, // The media custom properties\n        \"link\": ..., // The media URL\n        \"mediaId\": [...], // The media id on the video platform\n        \"available\": ..., // The media availability on the video platform\n        \"thumbnail\": ..., // The media thumbnail URL\n        \"title\": ..., // The media title\n        \"leadParagraph\": ..., // The media lead paragraph\n        \"description\": ..., // The media description\n        \"chapters\": [...], // The media chapters\n        \"tags\": [...], // The media tags\n        \"cut\": [...], // The media begin and end cuts\n        \"timecodes\": [...], // The media associated images\n      }\n    }"
            ],
            "itemtype": "method",
            "name": "getVideoReadyAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "params",
                            "description": "Request's parameters",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "id",
                                    "description": "The media id",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 715,
            "description": "Gets a media.",
            "example": [
                "\n\n    // Response example\n    {\n      \"entity\" : {\n        \"id\": ..., // The media id\n        \"state\": ..., // The media state\n        \"date\": ..., // The media published date as a timestamp\n        \"type\": ..., // The video associated platform\n        \"errorCode\": ..., // The media error code or -1 if no error\n        \"category\": ..., // The media category\n        \"properties\": {...}, // The media custom properties\n        \"link\": ..., // The media URL\n        \"mediaId\": [...], // The media id on the video platform\n        \"available\": ..., // The media availability on the video platform\n        \"thumbnail\": ..., // The media thumbnail URL\n        \"title\": ..., // The media title\n        \"leadParagraph\": ..., // The media lead paragraph\n        \"description\": ..., // The media description\n        \"chapters\": [...], // The media chapters\n        \"tags\": [...], // The media tags\n        \"cut\": [...], // The media begin and end cuts\n        \"timecodes\": [...], // The media associated images\n      }\n    }"
            ],
            "itemtype": "method",
            "name": "getEntityAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "params",
                            "description": "Request parameters",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "id",
                                    "description": "The id of the media to retrieve",
                                    "type": "String"
                                }
                            ]
                        },
                        {
                            "name": "query",
                            "description": "Request query",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "include",
                                    "description": "The list of fields to include from returned media",
                                    "type": "String|Array",
                                    "optional": true
                                },
                                {
                                    "name": "exclude",
                                    "description": "The list of fields to exclude from returned media. Ignored if\ninclude is also specified.",
                                    "type": "String|Array",
                                    "optional": true
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 845,
            "description": "Adds a media.",
            "itemtype": "method",
            "name": "addEntityAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "body",
                            "description": "The media information as multipart body",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "file",
                                    "description": "The media file as multipart data",
                                    "type": "Object",
                                    "optional": true
                                },
                                {
                                    "name": "thumbnail",
                                    "description": "The media thumbnail as multipart data",
                                    "type": "Object",
                                    "optional": true
                                },
                                {
                                    "name": "info",
                                    "description": "The media information",
                                    "type": "Object"
                                },
                                {
                                    "name": "info.title",
                                    "description": "The media title",
                                    "type": "String"
                                },
                                {
                                    "name": "info.properties",
                                    "description": "The media custom properties values with property id as keys",
                                    "type": "Object",
                                    "optional": true
                                },
                                {
                                    "name": "info.category",
                                    "description": "The media category id it belongs to",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "info.date",
                                    "description": "The media date",
                                    "type": "Date|Number|String",
                                    "optional": true
                                },
                                {
                                    "name": "info.leadParagraph",
                                    "description": "The media lead paragraph",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "info.description",
                                    "description": "The media description",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "info.groups",
                                    "description": "The media content groups it belongs to",
                                    "type": "Array",
                                    "optional": true
                                },
                                {
                                    "name": "info.platform",
                                    "description": "The platform to upload the file to",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "info.user",
                                    "description": "The id of the OpenVeo user to use as the video owner",
                                    "type": "String",
                                    "optional": true
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 1121,
            "description": "Updates a media.",
            "example": [
                "\n\n    // Response example\n    {\n      \"total\": 1\n    }"
            ],
            "itemtype": "method",
            "name": "updateEntityAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "params.id",
                            "description": "Id of the media to update",
                            "type": "String"
                        },
                        {
                            "name": "body",
                            "description": "The media information as multipart body",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "thumbnail",
                                    "description": "The media thumbnail as multipart data",
                                    "type": "Object",
                                    "optional": true
                                },
                                {
                                    "name": "info",
                                    "description": "The media information",
                                    "type": "Object"
                                },
                                {
                                    "name": "info.title",
                                    "description": "The media title",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "info.properties",
                                    "description": "The media custom properties values with property id as keys",
                                    "type": "Object",
                                    "optional": true
                                },
                                {
                                    "name": "info.category",
                                    "description": "The media category id it belongs to",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "info.date",
                                    "description": "The media date",
                                    "type": "Date|Number|String",
                                    "optional": true
                                },
                                {
                                    "name": "info.leadParagraph",
                                    "description": "The media lead paragraph",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "info.description",
                                    "description": "The media description",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "info.groups",
                                    "description": "The media content groups it belongs to",
                                    "type": "Array",
                                    "optional": true
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 1305,
            "description": "Gets medias.",
            "example": [
                "\n\n    // Response example\n    {\n      \"entities\" : [ ... ],\n      \"pagination\" : {\n        \"limit\": ..., // The limit number of medias by page\n        \"page\": ..., // The actual page\n        \"pages\": ..., // The total number of pages\n        \"size\": ... // The total number of medias\n    }"
            ],
            "itemtype": "method",
            "name": "getEntitiesAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "query",
                            "description": "Request's query parameters",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "query",
                                    "description": "To search on both medias title and description",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "useSmartSearch",
                                    "description": "1 to use a more advanced search mechanism, 0 to use a simple search\nbased on a regular expression",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "1"
                                },
                                {
                                    "name": "searchInPois",
                                    "description": "1 to also search in points of interest (tags / chapters) titles and\ndescriptions when useSmartSearch is set to 1",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "0"
                                },
                                {
                                    "name": "include",
                                    "description": "The list of fields to include from returned medias",
                                    "type": "String|Array",
                                    "optional": true
                                },
                                {
                                    "name": "exclude",
                                    "description": "The list of fields to exclude from returned medias. Ignored if\ninclude is also specified.",
                                    "type": "String|Array",
                                    "optional": true
                                },
                                {
                                    "name": "states",
                                    "description": "To filter medias by state",
                                    "type": "String|Array",
                                    "optional": true
                                },
                                {
                                    "name": "dateStart",
                                    "description": "To filter medias after or equal to a date (in format mm/dd/yyyy)",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "dateEnd",
                                    "description": "To get medias before a date (in format mm/dd/yyyy)",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "categories",
                                    "description": "To filter medias by category",
                                    "type": "String|Array",
                                    "optional": true
                                },
                                {
                                    "name": "groups",
                                    "description": "To filter medias by group",
                                    "type": "String|Array",
                                    "optional": true
                                },
                                {
                                    "name": "user",
                                    "description": "To filter medias by user",
                                    "type": "String|Array",
                                    "optional": true
                                },
                                {
                                    "name": "sortBy",
                                    "description": "To sort medias by either **title**, **description**, **date**,\n**state**, **views** or **category**",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "\"date\""
                                },
                                {
                                    "name": "sortOrder",
                                    "description": "Sort order (either **asc** or **desc**)",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "\"desc\""
                                },
                                {
                                    "name": "page",
                                    "description": "The expected page",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "0"
                                },
                                {
                                    "name": "limit",
                                    "description": "To limit the number of medias per page",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "10"
                                },
                                {
                                    "name": "properties",
                                    "description": "A list of properties with the property id as the key and the expected\nproperty value as the value",
                                    "type": "Object",
                                    "optional": true
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 1630,
            "description": "Publishes medias.\n\nChange the state of medias to published.",
            "example": [
                "\n\n    // Response example\n    {\n      \"total\": 42\n    }"
            ],
            "itemtype": "method",
            "name": "publishVideosAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "params",
                            "description": "Request's parameters",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "ids",
                                    "description": "A comma separated list of media ids",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 1715,
            "description": "Unpublishes medias.\n\nChange the state of medias to unpublished.",
            "example": [
                "\n\n    // Response example\n    {\n      \"total\": 42\n    }"
            ],
            "itemtype": "method",
            "name": "unpublishVideosAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "params",
                            "description": "Request's parameters",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "ids",
                                    "description": "A comma separated list of media ids",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 1800,
            "description": "Retries to publish videos on error.",
            "itemtype": "method",
            "name": "retryVideosAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "params",
                            "description": "Request's parameters",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "ids",
                                    "description": "Comma separated list of media ids",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 1843,
            "description": "Starts uploading videos to the media platform.",
            "itemtype": "method",
            "name": "startUploadAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "params",
                            "description": "Request's parameters",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "ids",
                                    "description": "Comma separated list of media ids",
                                    "type": "String"
                                },
                                {
                                    "name": "platform",
                                    "description": "The id of the platform to upload to",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 1888,
            "description": "Gets an instance of the controller associated provider.",
            "itemtype": "method",
            "name": "getProvider",
            "return": {
                "description": "The provider",
                "type": "VideoProvider"
            },
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 1898,
            "description": "Gets PublishManager singleton.",
            "itemtype": "method",
            "name": "getPublishManager",
            "return": {
                "description": "The PublishManager singleton",
                "type": "PublishManager"
            },
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 1908,
            "description": "Updates a tag associated to the given media.\n\nIf tag does not exist it is created.",
            "example": [
                "\n\n    // Response example\n    {\n      \"total\": 1,\n      \"poi\": ...\n    }"
            ],
            "itemtype": "method",
            "name": "updateTagAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "body",
                            "description": "Request multipart body",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "info",
                                    "description": "Modifications to perform on the tag",
                                    "type": "Object",
                                    "optional": true
                                },
                                {
                                    "name": "info.value",
                                    "description": "The tag time in milliseconds",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "info.name",
                                    "description": "The tag name",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "info.description",
                                    "description": "The tag description",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "file",
                                    "description": "The multipart file associated to the tag",
                                    "type": "String",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "params",
                            "description": "Request's parameters",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "id",
                                    "description": "The media id the tag belongs to",
                                    "type": "String"
                                },
                                {
                                    "name": "poiid",
                                    "description": "The tag id",
                                    "type": "String",
                                    "optional": true
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 1940,
            "description": "Updates a chapter associated to the given media.\n\nIf chapter does not exist it is created.",
            "example": [
                "\n\n    // Response example\n    {\n      \"total\": 1,\n      \"poi\": ...\n    }"
            ],
            "itemtype": "method",
            "name": "updateChapterAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "body",
                            "description": "Request body",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "info",
                                    "description": "Modifications to perform on the chapter",
                                    "type": "Object",
                                    "optional": true
                                },
                                {
                                    "name": "info.value",
                                    "description": "The chapter time in milliseconds",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "info.name",
                                    "description": "The chapter name",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "info.description",
                                    "description": "The chapter description",
                                    "type": "String",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "params",
                            "description": "Request parameters",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "id",
                                    "description": "The media id the chapter belongs to",
                                    "type": "String"
                                },
                                {
                                    "name": "poiid",
                                    "description": "The chapter id",
                                    "type": "String",
                                    "optional": true
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 1971,
            "description": "Removes tags from a media.",
            "example": [
                "\n\n    // Response example\n    {\n      \"total\": 1\n    }"
            ],
            "itemtype": "method",
            "name": "removeTagsAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "params",
                            "description": "Request parameters",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "id",
                                    "description": "The media id",
                                    "type": "String"
                                },
                                {
                                    "name": "poiids",
                                    "description": "A comma separated list of tags ids to remove",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 1994,
            "description": "Removes chapters from a media.",
            "example": [
                "\n\n    // Response example\n    {\n      \"total\": 1\n    }"
            ],
            "itemtype": "method",
            "name": "removeChaptersAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "params",
                            "description": "Request parameters",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "id",
                                    "description": "The media id",
                                    "type": "String"
                                },
                                {
                                    "name": "poiids",
                                    "description": "A comma separated list of chapters ids to remove",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 2017,
            "description": "Converts points of interest (chapters, tags & cut) units\nfrom percents to milliseconds (depending on the video\nduration).",
            "example": [
                "\n\n    // Response example\n    {\n      \"entity\": ...\n    }"
            ],
            "itemtype": "method",
            "name": "convertPoiAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "params",
                            "description": "Request parameters",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "id",
                                    "description": "The media id",
                                    "type": "String"
                                }
                            ]
                        },
                        {
                            "name": "body",
                            "description": "Information to convert points of interest",
                            "type": "String",
                            "props": [
                                {
                                    "name": "duration",
                                    "description": "The media duration in milliseconds",
                                    "type": "Number"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 2194,
            "description": "Gets the id of the super administrator.",
            "itemtype": "method",
            "name": "getSuperAdminId",
            "return": {
                "description": "The id of the super admin",
                "type": "String"
            },
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 2204,
            "description": "Gets the id of the anonymous user.",
            "itemtype": "method",
            "name": "getAnonymousId",
            "return": {
                "description": "The id of the anonymous user",
                "type": "String"
            },
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 2214,
            "description": "Tests if user is a contents manager.\n\nA contents manager can perform CRUD operations on medias.",
            "itemtype": "method",
            "name": "isUserManager",
            "params": [
                {
                    "name": "user",
                    "description": "The user to test",
                    "type": "Object",
                    "props": [
                        {
                            "name": "permissions",
                            "description": "The user's permissions",
                            "type": "Array"
                        }
                    ]
                }
            ],
            "return": {
                "description": "true if the user has permission to manage medias, false otherwise",
                "type": "Boolean"
            },
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 2233,
            "description": "Adds medias.\n\nIt is not possible to add several medias at a time.",
            "itemtype": "method",
            "name": "addEntitiesAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request"
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "throws": {
                "description": "Function is not implemented for this controller",
                "type": "Error"
            },
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 2249,
            "description": "Removes medias.\n\nUser must have permission to remove the medias. If user doesn't have permission to remove a particular media an\nHTTP forbidden error will be sent as response.\nOnly medias in a stable state can be removed.",
            "example": [
                "\n\n    // Response example\n    {\n      \"total\": 42\n    }"
            ],
            "itemtype": "method",
            "name": "removeEntitiesAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "params",
                            "description": "Request parameters",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "id",
                                    "description": "A comma separated list of media ids to remove",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 24,
            "description": "Unidentified error.",
            "itemtype": "property",
            "name": "UNKNOWN_ERROR",
            "type": "Object",
            "final": 1,
            "default": "0",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 38,
            "description": "Getting a ready video failed.",
            "itemtype": "property",
            "name": "GET_VIDEO_READY_ERROR",
            "type": "Object",
            "final": 1,
            "default": "1",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 52,
            "description": "Publishing a video failed.",
            "itemtype": "property",
            "name": "PUBLISH_VIDEOS_ERROR",
            "type": "Object",
            "final": 1,
            "default": "2",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 66,
            "description": "Unpublishing a video failed.",
            "itemtype": "property",
            "name": "UNPUBLISH_VIDEOS_ERROR",
            "type": "Object",
            "final": 1,
            "default": "3",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 80,
            "description": "Getting Publish plugin configuration failed.",
            "itemtype": "property",
            "name": "GET_CONFIGURATION_ERROR",
            "type": "Object",
            "final": 1,
            "default": "4",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 94,
            "description": "Getting the list of custom properties failed.",
            "itemtype": "property",
            "name": "GET_PROPERTIES_ERROR",
            "type": "Object",
            "final": 1,
            "default": "5",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 108,
            "description": "Getting the list of videos failed.",
            "itemtype": "property",
            "name": "GET_VIDEOS_ERROR",
            "type": "Object",
            "final": 1,
            "default": "6",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 122,
            "description": "Updating an entity statistics failed.",
            "itemtype": "property",
            "name": "STATISTICS_UPDATE_ERROR",
            "type": "Object",
            "final": 1,
            "default": "7",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 137,
            "description": "Saving watcher settings failed.",
            "itemtype": "property",
            "name": "SAVE_WATCHER_SETTINGS_ERROR",
            "type": "Object",
            "final": 1,
            "default": "8",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 151,
            "description": "Attaching a file to a point of interest failed.",
            "itemtype": "property",
            "name": "UPDATE_POI_UPLOAD_ERROR",
            "type": "Object",
            "final": 1,
            "default": "9",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 165,
            "description": "Getting the list of groups, when adding a media, failed.",
            "itemtype": "property",
            "name": "ADD_MEDIA_GROUPS_ERROR",
            "type": "Object",
            "final": 1,
            "default": "10",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 179,
            "description": "Getting the list of custom properties, when adding a media, failed.",
            "itemtype": "property",
            "name": "ADD_MEDIA_CUSTOM_PROPERTIES_ERROR",
            "type": "Object",
            "final": 1,
            "default": "11",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 193,
            "description": "Parsing multipart body, when adding a media, failed.",
            "itemtype": "property",
            "name": "ADD_MEDIA_PARSE_ERROR",
            "type": "Object",
            "default": "12",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 207,
            "description": "Checking that media does not already exists in database, when adding a media, failed.",
            "itemtype": "property",
            "name": "ADD_MEDIA_CHECK_DUPLICATE_ERROR",
            "type": "Object",
            "final": 1,
            "default": "13",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 221,
            "description": "Removing temporary media file, when adding a media, failed.",
            "itemtype": "property",
            "name": "ADD_MEDIA_REMOVE_FILE_ERROR",
            "type": "Object",
            "final": 1,
            "default": "14",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 235,
            "description": "Getting a ready media failed, media is not ready.",
            "itemtype": "property",
            "name": "GET_VIDEO_READY_NOT_READY_ERROR",
            "type": "Object",
            "final": 1,
            "default": "15",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 249,
            "description": "Getting a ready media failed when getting video platform information.",
            "itemtype": "property",
            "name": "GET_VIDEO_READY_UPDATE_MEDIA_WITH_PLATFORM_INFO_ERROR",
            "type": "Object",
            "final": 1,
            "default": "16",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 263,
            "description": "Updating a media failed when getting the media.",
            "itemtype": "property",
            "name": "UPDATE_MEDIA_GET_ONE_ERROR",
            "type": "Object",
            "final": 1,
            "default": "17",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 277,
            "description": "Getting medias failed when getting custom properties.",
            "itemtype": "property",
            "name": "GET_VIDEOS_GET_PROPERTIES_ERROR",
            "type": "Object",
            "final": 1,
            "default": "18",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 291,
            "description": "Publishing medias failed when getting medias.",
            "itemtype": "property",
            "name": "PUBLISH_VIDEOS_GET_VIDEOS_ERROR",
            "type": "Object",
            "final": 1,
            "default": "19",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 305,
            "description": "Unpublishing medias failed when getting medias.",
            "itemtype": "property",
            "name": "UNPUBLISH_VIDEOS_GET_VIDEOS_ERROR",
            "type": "Object",
            "final": 1,
            "default": "20",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 319,
            "description": "Updating point of interest failed when getting the media.",
            "itemtype": "property",
            "name": "UPDATE_POI_GET_ONE_ERROR",
            "type": "Object",
            "final": 1,
            "default": "21",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 333,
            "description": "Updating point of interest failed.",
            "itemtype": "property",
            "name": "UPDATE_POI_UPDATE_ERROR",
            "type": "Object",
            "final": 1,
            "default": "23",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 347,
            "description": "Removing media points of interest failed when getting the media.",
            "itemtype": "property",
            "name": "REMOVE_POIS_GET_ONE_ERROR",
            "type": "Object",
            "final": 1,
            "default": "25",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 361,
            "description": "Removing points of interest failed.",
            "itemtype": "property",
            "name": "REMOVE_POIS_REMOVE_ERROR",
            "type": "Object",
            "final": 1,
            "default": "26",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 375,
            "description": "Converting points of interest failed when getting media.",
            "itemtype": "property",
            "name": "CONVERT_POIS_GET_MEDIA_ERROR",
            "type": "Object",
            "final": 1,
            "default": "29",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 389,
            "description": "Converting points of interest failed, media is not ready.",
            "itemtype": "property",
            "name": "CONVERT_POIS_MEDIA_NOT_READY_ERROR",
            "type": "Object",
            "final": 1,
            "default": "30",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 403,
            "description": "Updating media statistics failed when getting media.",
            "itemtype": "property",
            "name": "STATISTICS_GET_ONE_ERROR",
            "type": "Object",
            "final": 1,
            "default": "31",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 417,
            "description": "Convert points of interest failed when updating the media.",
            "itemtype": "property",
            "name": "CONVERT_POIS_UPDATE_MEDIA_ERROR",
            "type": "Object",
            "final": 1,
            "default": "32",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 431,
            "description": "Invalid video thumbnail.",
            "itemtype": "property",
            "name": "INVALID_VIDEO_THUMBNAIL",
            "type": "Object",
            "final": 1,
            "default": "33",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 445,
            "description": "Updating a media failed when parsing body.",
            "itemtype": "property",
            "name": "UPDATE_MEDIA_PARSE_ERROR",
            "type": "Object",
            "final": 1,
            "default": "34",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 459,
            "description": "Updating a media failed.",
            "itemtype": "property",
            "name": "UPDATE_MEDIA_ERROR",
            "type": "Object",
            "final": 1,
            "default": "35",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 473,
            "description": "Getting media failed.",
            "itemtype": "property",
            "name": "GET_MEDIA_ERROR",
            "type": "Object",
            "final": 1,
            "default": "36",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 487,
            "description": "Getting media failed when getting video platform information.",
            "itemtype": "property",
            "name": "GET_MEDIA_UPDATE_MEDIA_WITH_PLATFORM_INFO_ERROR",
            "type": "Object",
            "final": 1,
            "default": "37",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 501,
            "description": "Getting custom properties failed while saving TLS settings.",
            "itemtype": "property",
            "name": "SAVE_TLS_SETTINGS_CUSTOM_PROPERTIES_ERROR",
            "type": "Object",
            "final": 1,
            "default": "38",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 515,
            "description": "Saving TLS settings failed.",
            "itemtype": "property",
            "name": "SAVE_TLS_SETTINGS_ERROR",
            "type": "Object",
            "final": 1,
            "default": "39",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 529,
            "description": "Synchronizing media with media platform failed while updating media.",
            "itemtype": "property",
            "name": "UPDATE_MEDIA_SYNCHRONIZE_ERROR",
            "type": "Object",
            "final": 1,
            "default": "40",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 543,
            "description": "Removing medias failed, a media is not in a stable state.",
            "itemtype": "property",
            "name": "REMOVE_MEDIAS_STATE_ERROR",
            "type": "Object",
            "final": 1,
            "default": "41",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 557,
            "description": "Removing medias failed.",
            "itemtype": "property",
            "name": "REMOVE_MEDIAS_ERROR",
            "type": "Object",
            "final": 1,
            "default": "42",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 571,
            "description": "Removing medias failed when getting the list of medias.",
            "itemtype": "property",
            "name": "REMOVE_MEDIAS_GET_MEDIAS_ERROR",
            "type": "Object",
            "final": 1,
            "default": "43",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 585,
            "description": "Getting medias failed when getting the list of categories.",
            "itemtype": "property",
            "name": "GET_VIDEOS_GET_CATEGORIES_ERROR",
            "type": "Object",
            "final": 1,
            "default": "44",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 599,
            "description": "Saving catalog settings failed.",
            "itemtype": "property",
            "name": "SAVE_CATALOG_SETTINGS_ERROR",
            "type": "Object",
            "final": 1,
            "default": "45",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 613,
            "description": "Adding media failed when verifying the owner.",
            "itemtype": "property",
            "name": "ADD_MEDIA_VERIFY_OWNER_ERROR",
            "type": "Object",
            "final": 1,
            "default": "46",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 627,
            "description": "Creating point of interest failed.",
            "itemtype": "property",
            "name": "UPDATE_POI_CREATE_ERROR",
            "type": "Object",
            "final": 1,
            "default": "47",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 641,
            "description": "Updating point of interest of a media failed.",
            "itemtype": "property",
            "name": "UPDATE_POI_UPDATE_MEDIA_ERROR",
            "type": "Object",
            "final": 1,
            "default": "48",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 655,
            "description": "Removing points of interest when updating the media.",
            "itemtype": "property",
            "name": "REMOVE_POIS_UPDATE_MEDIA_ERROR",
            "type": "Object",
            "final": 1,
            "default": "49",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 669,
            "description": "Getting a ready video failed when getting points of interest.",
            "itemtype": "property",
            "name": "GET_VIDEO_READY_POPULATE_WITH_POIS_ERROR",
            "type": "Object",
            "final": 1,
            "default": "50",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 683,
            "description": "Getting media failed when populating with points of interest.",
            "itemtype": "property",
            "name": "GET_MEDIA_POPULATE_WITH_POIS_ERROR",
            "type": "Object",
            "final": 1,
            "default": "51",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 697,
            "description": "Converting points of interest failed when getting points of interest.",
            "itemtype": "property",
            "name": "CONVERT_POIS_GET_POIS_ERROR",
            "type": "Object",
            "final": 1,
            "default": "52",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 711,
            "description": "Converting points of interest failed when updating a point of interest.",
            "itemtype": "property",
            "name": "CONVERT_POIS_UPDATE_POI_ERROR",
            "type": "Object",
            "final": 1,
            "default": "53",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 725,
            "description": "Getting medias failed when getting the list of categories.",
            "itemtype": "property",
            "name": "GET_VIDEOS_POPULATE_WITH_POIS_ERROR",
            "type": "Object",
            "final": 1,
            "default": "54",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 739,
            "description": "Getting medias failed when searching in points of interest.",
            "itemtype": "property",
            "name": "GET_VIDEOS_SEARCH_IN_POIS_ERROR",
            "type": "Object",
            "final": 1,
            "default": "55",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 755,
            "description": "Getting a ready video failed, user doesn't have enough privilege.",
            "itemtype": "property",
            "name": "GET_VIDEO_READY_FORBIDDEN",
            "type": "Object",
            "final": 1,
            "default": "256",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 769,
            "description": "Publishing a video failed, user doesn't have enough privilege.",
            "itemtype": "property",
            "name": "PUBLISH_VIDEOS_FORBIDDEN",
            "type": "Object",
            "final": 1,
            "default": "257",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 783,
            "description": "Unpublishing a video failed, user doesn't have enough privilege.",
            "itemtype": "property",
            "name": "UNPUBLISH_VIDEOS_FORBIDDEN",
            "type": "Object",
            "final": 1,
            "default": "258",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 797,
            "description": "Updating a media point of interest failed, user doesn't have enough privilege.",
            "itemtype": "property",
            "name": "UPDATE_POI_FORBIDDEN",
            "type": "Object",
            "final": 1,
            "default": "259",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 811,
            "description": "Updating a media failed, user doesn't have enough privilege.",
            "itemtype": "property",
            "name": "UPDATE_MEDIA_FORBIDDEN",
            "type": "Object",
            "final": 1,
            "default": "260",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 825,
            "description": "Removing media points of interest failed, user doesn't have enough privilege.",
            "itemtype": "property",
            "name": "REMOVE_POIS_FORBIDDEN",
            "type": "Object",
            "final": 1,
            "default": "262",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 839,
            "description": "Converting points of interest failed, user doesn't have enough privilege.",
            "itemtype": "property",
            "name": "CONVERT_POIS_FORBIDDEN",
            "type": "Object",
            "final": 1,
            "default": "264",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 853,
            "description": "Getting media failed, user doesn't have enough privilege.",
            "itemtype": "property",
            "name": "GET_MEDIA_FORBIDDEN",
            "type": "Object",
            "final": 1,
            "default": "265",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 867,
            "description": "Removing medias failed, user doesn't have enough privilege.",
            "itemtype": "property",
            "name": "REMOVE_MEDIAS_FORBIDDEN",
            "type": "Object",
            "final": 1,
            "default": "266",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 883,
            "description": "Getting a ready video failed, missing parameters.",
            "itemtype": "property",
            "name": "GET_VIDEO_READY_MISSING_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "512",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 897,
            "description": "Publishing a video failed, missing parameters.",
            "itemtype": "property",
            "name": "PUBLISH_VIDEOS_MISSING_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "513",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 911,
            "description": "Unpublishing a video failed, missing parameters.",
            "itemtype": "property",
            "name": "UNPUBLISH_VIDEOS_MISSING_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "514",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 925,
            "description": "Retrying video processing failed, missing parameters.",
            "itemtype": "property",
            "name": "RETRY_VIDEOS_MISSING_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "515",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 939,
            "description": "Starting a video upload failed, missing parameters.",
            "itemtype": "property",
            "name": "START_UPLOAD_VIDEOS_MISSING_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "516",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 953,
            "description": "Setting statistics about an entity failed, missing the id parameter.",
            "itemtype": "property",
            "name": "STATISTICS_MISSING_ID_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "517",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 968,
            "description": "Setting statistics about an entity failed, unknown statistic property.",
            "itemtype": "property",
            "name": "STATISTICS_PROPERTY_UNKNOWN",
            "type": "Object",
            "final": 1,
            "default": "518",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 983,
            "description": "Setting statistics about an entity failed, unknown entity.",
            "itemtype": "property",
            "name": "STATISTICS_ENTITY_UNKNOWN",
            "type": "Object",
            "final": 1,
            "default": "519",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 998,
            "description": "Setting statistics about an entity failed, missing the count parameter.",
            "itemtype": "property",
            "name": "STATISTICS_MISSING_COUNT_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "520",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 1013,
            "description": "Getting the list of videos failed, wrong parameters.",
            "itemtype": "property",
            "name": "GET_VIDEOS_WRONG_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "521",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 1027,
            "description": "Updating a media point of interest failed, missing parameters.",
            "itemtype": "property",
            "name": "UPDATE_POI_MISSING_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "522",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 1041,
            "description": "Removing media points of interest failed, missing parameters.",
            "itemtype": "property",
            "name": "REMOVE_POIS_MISSING_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "523",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 1055,
            "description": "Adding a media failed, wrong parameters.",
            "itemtype": "property",
            "name": "ADD_MEDIA_MISSING_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "524",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 1069,
            "description": "Adding media failed, missing the body.",
            "itemtype": "property",
            "name": "ADD_MEDIA_MISSING_INFO_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "525",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 1083,
            "description": "Adding media failed, wrong file parameter.",
            "itemtype": "property",
            "name": "ADD_MEDIA_WRONG_FILE_PARAMETER",
            "type": "Object",
            "final": 1,
            "default": "526",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 1098,
            "description": "Adding media failed, wrong parameters.",
            "itemtype": "property",
            "name": "ADD_MEDIA_WRONG_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "527",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 1112,
            "description": "Adding media failed, wrong properties parameter.",
            "itemtype": "property",
            "name": "ADD_MEDIA_WRONG_PROPERTIES_PARAMETER",
            "type": "Object",
            "final": 1,
            "default": "528",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 1126,
            "description": "Saving watcher settings failed, missing parameters.",
            "itemtype": "property",
            "name": "SAVE_WATCHER_SETTINGS_MISSING_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "529",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 1140,
            "description": "Saving watcher settings failed, wrong parameters.",
            "itemtype": "property",
            "name": "SAVE_WATCHER_SETTINGS_WRONG_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "530",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 1154,
            "description": "Getting video ready failed, wrong parameters.",
            "itemtype": "property",
            "name": "GET_VIDEO_READY_WRONG_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "531",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 1168,
            "description": "Publishing videos failed, wrong parameters.",
            "itemtype": "property",
            "name": "PUBLISH_VIDEOS_WRONG_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "532",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 1182,
            "description": "Unpublishing videos failed, wrong parameters.",
            "itemtype": "property",
            "name": "UNPUBLISH_VIDEOS_WRONG_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "533",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 1196,
            "description": "Starting videos upload failed, wrong parameters.",
            "itemtype": "property",
            "name": "START_UPLOAD_VIDEOS_WRONG_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "534",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 1210,
            "description": "Updating a media point of interest failed, wrong parameters.",
            "itemtype": "property",
            "name": "UPDATE_POI_WRONG_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "535",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 1224,
            "description": "Removing media points of interest failed, wrong parameters.",
            "itemtype": "property",
            "name": "REMOVE_POIS_WRONG_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "538",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 1238,
            "description": "Converting points of interest failed, missing parameters.",
            "itemtype": "property",
            "name": "CONVERT_POIS_MISSING_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "541",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 1252,
            "description": "Converting points of interest failed, wrong parameters.",
            "itemtype": "property",
            "name": "CONVERT_POIS_WRONG_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "542",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 1266,
            "description": "Getting media failed, wrong parameters.",
            "itemtype": "property",
            "name": "GET_MEDIA_WRONG_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "543",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 1280,
            "description": "Getting media failed, missing parameters.",
            "itemtype": "property",
            "name": "GET_MEDIA_MISSING_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "544",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 1294,
            "description": "Retrying video processing failed, wrong parameters.",
            "itemtype": "property",
            "name": "RETRY_VIDEOS_WRONG_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "545",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 1308,
            "description": "Getting the list of videos failed, wrong custom properties values.",
            "itemtype": "property",
            "name": "GET_VIDEOS_CUSTOM_PROPERTIES_WRONG_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "546",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 1322,
            "description": "Saving TLS settings failed, wrong parameters.",
            "itemtype": "property",
            "name": "SAVE_TLS_SETTINGS_WRONG_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "547",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 1336,
            "description": "Saving TLS settings failed, one or more custom properties do not exist.",
            "itemtype": "property",
            "name": "SAVE_TLS_SETTINGS_WRONG_PROPERTIES_PARAMETER",
            "type": "Object",
            "final": 1,
            "default": "548",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 1350,
            "description": "Adding media failed, missing the media file.",
            "itemtype": "property",
            "name": "ADD_MEDIA_MISSING_FILE_PARAMETER",
            "type": "Object",
            "final": 1,
            "default": "549",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 1364,
            "description": "Removing medias failed, missing the media ids.",
            "itemtype": "property",
            "name": "REMOVE_MEDIAS_MISSING_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "550",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 1378,
            "description": "Saving catalog settings failed, wrong parameters.",
            "itemtype": "property",
            "name": "SAVE_CATALOG_SETTINGS_WRONG_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "551",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 1392,
            "description": "Saving catalog settings failed, missing parameters.",
            "itemtype": "property",
            "name": "SAVE_CATALOG_SETTINGS_MISSING_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "552",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 1406,
            "description": "Adding media failed, specified user does not exist.",
            "itemtype": "property",
            "name": "ADD_MEDIA_WRONG_USER_PARAMETER",
            "type": "Object",
            "final": 1,
            "default": "553",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 1422,
            "description": "Ready video was not found.",
            "itemtype": "property",
            "name": "GET_VIDEO_READY_NOT_FOUND",
            "type": "Object",
            "final": 1,
            "default": "768",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 1436,
            "description": "Media was not found.",
            "itemtype": "property",
            "name": "GET_MEDIA_NOT_FOUND",
            "type": "Object",
            "final": 1,
            "default": "769",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 1450,
            "description": "Media was not found when trying to update it.",
            "itemtype": "property",
            "name": "UPDATE_MEDIA_NOT_FOUND_ERROR",
            "type": "Object",
            "final": 1,
            "default": "770",
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 23,
            "description": "Fired when an error occurred while processing the package.",
            "itemtype": "event",
            "name": "error",
            "params": [
                {
                    "name": "The",
                    "description": "error",
                    "type": "Error"
                }
            ],
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 30,
            "description": "Fired when package processing has succeed.",
            "itemtype": "event",
            "name": "complete",
            "params": [
                {
                    "name": "The",
                    "description": "processed package",
                    "type": "Object"
                }
            ],
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 37,
            "description": "Fired when package state has changed.",
            "itemtype": "event",
            "name": "stateChanged",
            "params": [
                {
                    "name": "The",
                    "description": "processed package",
                    "type": "Object"
                }
            ],
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 57,
            "description": "Publish configuration.",
            "itemtype": "property",
            "name": "publishConf",
            "type": "Object",
            "final": 1,
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 66,
            "description": "Media provider.",
            "itemtype": "property",
            "name": "videoProvider",
            "type": "VideoProvider",
            "final": 1,
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 75,
            "description": "Points of interest provider.",
            "itemtype": "property",
            "name": "poiProvider",
            "type": "PoiProvider",
            "final": 1,
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 84,
            "description": "Media package description object.",
            "itemtype": "property",
            "name": "mediaPackage",
            "type": "Object",
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 92,
            "description": "Video platforms configuration object from videoPlatformConf.json file.",
            "itemtype": "property",
            "name": "videoPlatformConf",
            "type": "Object",
            "final": 1,
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 112,
            "description": "Package states.",
            "itemtype": "property",
            "name": "STATES",
            "type": "Object",
            "static": 1,
            "final": 1,
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 131,
            "description": "Package transitions (from one state to another).",
            "itemtype": "property",
            "name": "TRANSITIONS",
            "type": "Object",
            "static": 1,
            "final": 1,
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 149,
            "description": "Define the order in which transitions will be executed for a Package.",
            "itemtype": "property",
            "name": "stateTransitions",
            "type": "Array",
            "static": 1,
            "final": 1,
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 167,
            "description": "Define machine state authorized transitions depending on previous and next states.",
            "itemtype": "property",
            "name": "stateMachine",
            "type": "Array",
            "static": 1,
            "final": 1,
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 209,
            "description": "Creates a state machine to publish the package.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "initialState",
                    "description": "Initial machine state",
                    "type": "String"
                },
                {
                    "name": "initialTransition",
                    "description": "Initial machine transition",
                    "type": "String"
                }
            ],
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 260,
            "description": "Updates media state and sends an event to inform about state changed.",
            "itemtype": "method",
            "name": "updateState",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the media to update",
                    "type": "Number"
                },
                {
                    "name": "state",
                    "description": "The state of the media",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of updated items",
                    "type": "Function"
                }
            ],
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 280,
            "description": "Starts executing at the given transition.\n\nThe rest of the transitions stack will be executed.",
            "itemtype": "method",
            "name": "executeTransition",
            "params": [
                {
                    "name": "transition",
                    "description": "The transition to launch",
                    "type": "String"
                }
            ],
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 328,
            "description": "Initializes and stores the package.\n\nThis is a transition.",
            "itemtype": "method",
            "name": "initPackage",
            "return": {
                "description": "Promise resolving when transition is done",
                "type": "Promise"
            },
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 362,
            "description": "Copies package from its submitted directory to temporary directory.\n\nThis is a transition.",
            "itemtype": "method",
            "name": "copyPackage",
            "return": {
                "description": "Promise resolving when transition is done",
                "type": "Promise"
            },
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 392,
            "description": "Removes original package.\n\nThis is a transition.",
            "itemtype": "method",
            "name": "removeOriginalPackage",
            "return": {
                "description": "Promise resolving when transition is done",
                "type": "Promise"
            },
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 423,
            "description": "Uploads the media to the video platform.\n\nThis is a transition.",
            "itemtype": "method",
            "name": "uploadMedia",
            "return": {
                "description": "Promise resolving when transition is done",
                "type": "Promise"
            },
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 468,
            "description": "Synchronizes uploaded media information with the media platform.\n\nThis is a transition.",
            "itemtype": "method",
            "name": "synchronizeMedia",
            "return": {
                "description": "Promise resolving when transition is done",
                "type": "Promise"
            },
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 498,
            "description": "Removes extracted tar files from temporary directory.\n\nThis is a transition.",
            "itemtype": "method",
            "name": "cleanDirectory",
            "return": {
                "description": "Promise resolving when transition is done",
                "type": "Promise"
            },
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 521,
            "description": "Gets the stack of transitions corresponding to the package.\n\nEach package has its own way to be published, thus transitions stack\nis different by package.",
            "itemtype": "method",
            "name": "getTransitions",
            "return": {
                "description": "The stack of transitions",
                "type": "Array"
            },
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 534,
            "description": "Gets the list of transitions states corresponding to the package.",
            "itemtype": "method",
            "name": "getStateMachine",
            "return": {
                "description": "The list of states/transitions",
                "type": "Array"
            },
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 544,
            "description": "Gets the media file path of the package.",
            "itemtype": "method",
            "name": "getMediaFilePath",
            "return": {
                "description": "System path of the media file",
                "type": "String"
            },
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 557,
            "description": "Sets a package as in error.",
            "itemtype": "method",
            "name": "setError",
            "params": [
                {
                    "name": "error",
                    "description": "The package error",
                    "type": "PublishError"
                },
                {
                    "name": "doNotUpdateMedia",
                    "description": "true to simply emit the error without updating the media",
                    "type": "Boolean"
                }
            ],
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/PackageError.js",
            "line": 23,
            "description": "The package's error code.",
            "itemtype": "property",
            "name": "code",
            "type": "String",
            "final": 1,
            "class": "PackageError",
            "module": "packages"
        },
        {
            "file": "app/server/packages/PackageError.js",
            "line": 32,
            "description": "Error message.",
            "itemtype": "property",
            "name": "message",
            "type": "String",
            "final": 1,
            "class": "PackageError",
            "module": "packages"
        },
        {
            "file": "app/server/packages/PackageError.js",
            "line": 41,
            "description": "Error name.",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "final": 1,
            "class": "PackageError",
            "module": "packages"
        },
        {
            "file": "app/server/packages/TarPackage.js",
            "line": 82,
            "description": "Process states for tar packages.",
            "itemtype": "property",
            "name": "STATES",
            "type": "Object",
            "static": 1,
            "final": 1,
            "class": "TarPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/TarPackage.js",
            "line": 97,
            "description": "Tar package process transitions (from one state to another).",
            "itemtype": "property",
            "name": "TRANSITIONS",
            "type": "Object",
            "static": 1,
            "final": 1,
            "class": "TarPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/TarPackage.js",
            "line": 112,
            "description": "Define the order in which transitions will be executed for a TarPackage.",
            "itemtype": "property",
            "name": "stateTransitions",
            "type": "Array",
            "static": 1,
            "final": 1,
            "class": "TarPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/TarPackage.js",
            "line": 138,
            "description": "Define machine state authorized transitions depending on previous and next states.",
            "itemtype": "property",
            "name": "stateMachine",
            "type": "Array",
            "static": 1,
            "final": 1,
            "class": "TarPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/TarPackage.js",
            "line": 180,
            "description": "Validates package content.\n\nA video package must contain, at least a valid package information\nfile and a video file.",
            "example": [
                "\n    // mediaPackage example\n    {\n      \"id\" : 1422731934859, // Internal video id\n      \"type\" : \"vimeo\", // The video platform to use\n      \"path\" : \"C:/Temp/\", // The path of the hot folder\n      \"originalPackagePath\" : \"C:/Temp/video-package.tar\", // The original package path in hot folder\n    }"
            ],
            "itemtype": "method",
            "name": "validatePackage",
            "async": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "callback",
                    "description": "The function to call when done\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** The package information object",
                    "type": "Function"
                }
            ],
            "class": "TarPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/TarPackage.js",
            "line": 236,
            "description": "Saves the XML timecode file into a JSON equivalent.\nThis will check if the file exists first.\n\n1. Test if timecode xml file exists\n2. Transcode XML file to a JSON equivalent\n   e.g.\n3. Format JSON\n   e.g.",
            "example": [
                "\n    // Transform XML timecodes into JSON\n    // From :\n    {\n      \"player\": {\n        \"synchro\":\n        [\n          {\n            \"id\": [\"slide_00000.jpeg\"],\n            \"timecode\": [\"0\"]\n          }, {\n            \"id\": [\"slide_00001.jpeg\"],\n            \"timecode\": [\"1200\"]\n          }\n        ]\n      }\n    }\n\n    // To :\n    [\n      {\n        \"timecode\": 0,\n        \"type\": \"image\"\n        \"data\": {\n          \"filename\": \"slide_00000.jpeg\"\n        }\n      },\n      {\n        \"timecode\": 1200,\n        \"type\": \"image\"\n        \"data\": {\n          \"filename\": \"slide_00001.jpeg\"\n        }\n      }\n    ]"
            ],
            "itemtype": "method",
            "name": "saveTimecodes",
            "access": "private",
            "tagname": "",
            "async": 1,
            "params": [
                {
                    "name": "xmlTimecodeFilePath",
                    "description": "The timecode file to save",
                    "type": "String"
                },
                {
                    "name": "destinationFilePath",
                    "description": "The JSON timecode file path",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when done\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "TarPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/TarPackage.js",
            "line": 359,
            "description": "Gets the stack of transitions corresponding to the package.",
            "itemtype": "method",
            "name": "getTransitions",
            "return": {
                "description": "The stack of transitions",
                "type": "Array"
            },
            "class": "TarPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/TarPackage.js",
            "line": 369,
            "description": "Gets the list of transitions states corresponding to the package.",
            "return": {
                "description": "The list of states/transitions",
                "type": "Array"
            },
            "itemtype": "method",
            "name": "getStateMachine",
            "class": "TarPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/TarPackage.js",
            "line": 379,
            "description": "Extracts package into temporary directory.\n\nThis is a transition.",
            "itemtype": "method",
            "name": "extractPackage",
            "return": {
                "description": "Promise resolving when transition is done",
                "type": "Promise"
            },
            "class": "TarPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/TarPackage.js",
            "line": 409,
            "description": "Validates the package by analyzing its content.\n\nThis is a transition.",
            "itemtype": "method",
            "name": "validatePackage",
            "return": {
                "description": "Promise resolving when transition is done",
                "type": "Promise"
            },
            "class": "TarPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/TarPackage.js",
            "line": 461,
            "description": "Saves package points of interest.\n\nIt expects package metadata to have a property \"indexes\" containing a list of points of interest with for each one:\n - **String** type The type of the point of interest, either \"image\" or \"tag\"\n - **Number** timecode The time of the point of interest in the video (in milliseconds)\n - **Object** data Information about the point of interest depending on its type, see below\n\n\"data\" property of a point of interest of type \"image\":\n - **String** filename The name of the image file in the package\n\n\"data\" property of a point of interest of type \"tag\":\n - **String** tagname The name of the tag\n\nInstead of defining the points of interest in package metadata, it is possible to define them in a \"synchro.xml\"\nfile at the root of the package with the following content:\n<pre>\n  <?xml version=\"1.0\"?>\n  <player>\n    <synchro id=\"slide_00000.jpeg\" timecode=\"0\"/>\n    <synchro id=\"slide_00001.jpeg\" timecode=\"1400\"/>\n    ...\n  </player>\n</pre>\n\nHowever using \"synchro.xml\" is deprecated and should not be used anymore. Also note that it is not possible to\ndefine points of interest of type \"tag\" using this method.\n\nThis is a transition.",
            "itemtype": "method",
            "name": "saveTimecodes",
            "return": {
                "description": "Promise resolving when transition is done",
                "type": "Promise"
            },
            "class": "TarPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/TarPackage.js",
            "line": 648,
            "description": "Gets the media file path of the package.",
            "itemtype": "method",
            "name": "getMediaFilePath",
            "return": {
                "description": "System path of the media file",
                "type": "String"
            },
            "class": "TarPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/TarPackage.js",
            "line": 658,
            "description": "Selects the media to use as the base media in multi-sources scenario.\n\nFinds which media has the most timecodes / tags.",
            "itemtype": "method",
            "name": "selectMultiSourcesMedia",
            "params": [
                {
                    "name": "media1",
                    "description": "A media",
                    "type": "Object"
                },
                {
                    "name": "media2",
                    "description": "A media",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Either media1 or media2",
                "type": "Object"
            },
            "class": "TarPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/VideoPackage.js",
            "line": 43,
            "description": "Process states for video packages.",
            "itemtype": "property",
            "name": "STATES",
            "type": "Object",
            "static": 1,
            "final": 1,
            "class": "VideoPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/VideoPackage.js",
            "line": 60,
            "description": "Video package process transitions (from one state to another).",
            "itemtype": "property",
            "name": "TRANSITIONS",
            "type": "Object",
            "static": 1,
            "final": 1,
            "class": "VideoPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/VideoPackage.js",
            "line": 77,
            "description": "Define the order in which transitions will be executed for a video Package.",
            "itemtype": "property",
            "name": "stateTransitions",
            "type": "Array",
            "static": 1,
            "final": 1,
            "class": "VideoPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/VideoPackage.js",
            "line": 100,
            "description": "Define machine state authorized transitions depending on previous and next states.",
            "itemtype": "property",
            "name": "stateMachine",
            "type": "Array",
            "static": 1,
            "final": 1,
            "class": "VideoPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/VideoPackage.js",
            "line": 147,
            "description": "Waits for the given media to be in one of the given states.\n\nWaiting time is 1 second.",
            "itemtype": "method",
            "name": "waitForMediaState",
            "async": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "media",
                    "description": "The media",
                    "type": "Object",
                    "props": [
                        {
                            "name": "id",
                            "description": "The media id",
                            "type": "Object"
                        }
                    ]
                },
                {
                    "name": "states",
                    "description": "The authorized states",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when done with:\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** The media with all properties",
                    "type": "Function"
                }
            ],
            "class": "VideoPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/VideoPackage.js",
            "line": 180,
            "description": "Defragment the MP4\n\nIf the input file is fragmented, ffmpeg will be used to defragment\nthe MP4. The fragmentation detection of the file is based on an un-\nknown \"nb_frames\" property in ffprobe output metadata.",
            "itemtype": "method",
            "name": "defragmentMp4",
            "return": {
                "description": "Promise resolving when transition is done",
                "type": "Promise"
            },
            "class": "VideoPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/VideoPackage.js",
            "line": 253,
            "description": "Generates a thumbnail for the video.\n\nIf no thumbnail has been provided by the user form, ffmpeg will be\nused to extract an image from the video to generate a thumbnail.\n\nThis is a transition.",
            "itemtype": "method",
            "name": "generateThumb",
            "return": {
                "description": "Promise resolving when transition is done",
                "type": "Promise"
            },
            "class": "VideoPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/VideoPackage.js",
            "line": 329,
            "description": "Retrieves video height from video metadatas.\n\nThis is a transition.",
            "itemtype": "method",
            "name": "getMetadata",
            "return": {
                "description": "Promise resolving when transition is done",
                "type": "Promise"
            },
            "class": "VideoPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/VideoPackage.js",
            "line": 371,
            "description": "Copies presentation images from temporary directory to the public directory.\n\nThis is a transition.",
            "itemtype": "method",
            "name": "copyImages",
            "return": {
                "description": "Promise resolving when transition is done",
                "type": "Promise"
            },
            "class": "VideoPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/VideoPackage.js",
            "line": 459,
            "description": "Merges the video with the first found video having the same original name.\n\nMerging consists of merging the two videos into one in OpenVeo. It means that both videos still exist on the video\nplatform but only one reference exists in OpenVeo with multi remote videos.\nDepending on the type of package, global information are taken from the current video or the video we are merging\nwith.\n\nThis is a transition.",
            "itemtype": "method",
            "name": "merge",
            "return": {
                "description": "Promise resolving when transition is done",
                "type": "Promise"
            },
            "class": "VideoPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/VideoPackage.js",
            "line": 576,
            "description": "Selects the media to use as the base media in multi-sources scenario.",
            "itemtype": "method",
            "name": "selectMultiSourcesMedia",
            "params": [
                {
                    "name": "media1",
                    "description": "A media",
                    "type": "Object"
                },
                {
                    "name": "media2",
                    "description": "A media",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Either media1 or media2",
                "type": "Object"
            },
            "class": "VideoPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/VideoPackage.js",
            "line": 588,
            "description": "Gets the stack of transitions corresponding to the package.\n\nEach package has its own way to be published, thus transitions stack\nis different by package.",
            "itemtype": "method",
            "name": "getTransitions",
            "return": {
                "description": "The stack of transitions",
                "type": "Array"
            },
            "class": "VideoPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/VideoPackage.js",
            "line": 601,
            "description": "Gets the list of transitions states corresponding to the package.",
            "itemtype": "method",
            "name": "getStateMachine",
            "return": {
                "description": "The list of states/transitions",
                "type": "Array"
            },
            "class": "VideoPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 16,
            "description": "No error.",
            "itemtype": "property",
            "name": "NO_ERROR",
            "type": "Number",
            "default": "-1",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 26,
            "description": "Error involving a server error.",
            "itemtype": "property",
            "name": "UNKNOWN",
            "type": "Number",
            "default": "0",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 36,
            "description": "Package type is not supported.",
            "itemtype": "property",
            "name": "INVALID_PACKAGE_TYPE",
            "type": "Number",
            "default": "1",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 46,
            "description": "Package copy failed.",
            "itemtype": "property",
            "name": "COPY",
            "type": "Number",
            "default": "2",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 56,
            "description": "Removing original package failed.",
            "itemtype": "property",
            "name": "UNLINK",
            "type": "Number",
            "default": "3",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 66,
            "description": "Extracting an archive package failed.",
            "itemtype": "property",
            "name": "EXTRACT",
            "type": "Number",
            "default": "4",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 76,
            "description": "Package does not respect the expected format for its type.",
            "itemtype": "property",
            "name": "VALIDATION",
            "type": "Number",
            "default": "5",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 86,
            "description": "Saving package data into database failed.",
            "itemtype": "property",
            "name": "SAVE_PACKAGE_DATA",
            "type": "Number",
            "default": "7",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 96,
            "description": "Creating synchro.json file failed.",
            "itemtype": "property",
            "name": "SAVE_TIMECODE",
            "type": "Number",
            "default": "8",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 106,
            "description": "Uploading media to media platform failed.",
            "itemtype": "property",
            "name": "MEDIA_UPLOAD",
            "type": "Number",
            "default": "9",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 116,
            "description": "Synchronizing media to the media platform failed.",
            "itemtype": "property",
            "name": "MEDIA_SYNCHRONIZE",
            "type": "Number",
            "default": "10",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 126,
            "description": "Scanning package temporary directory failed.",
            "itemtype": "property",
            "name": "SCAN_FOR_IMAGES",
            "type": "Number",
            "default": "11",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 136,
            "description": "Cleaning package temporary directory failed.",
            "itemtype": "property",
            "name": "CLEAN_DIRECTORY",
            "type": "Number",
            "default": "13",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 146,
            "description": "Retrying / uploading package failed.\n\nPackage was not found.",
            "itemtype": "property",
            "name": "PACKAGE_NOT_FOUND",
            "type": "Number",
            "default": "14",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 158,
            "description": "Executing a state machine transition failed.",
            "itemtype": "property",
            "name": "TRANSITION",
            "type": "Number",
            "default": "15",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 168,
            "description": "Package configuration is not valid when creating a Package.",
            "itemtype": "property",
            "name": "INVALID_CONFIGURATION",
            "type": "Number",
            "default": "16",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 178,
            "description": "Generating media thumbnail failed.",
            "itemtype": "property",
            "name": "GENERATE_THUMB",
            "type": "Number",
            "default": "17",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 188,
            "description": "Getting media metadata failed.",
            "itemtype": "property",
            "name": "GET_METADATA",
            "type": "Number",
            "default": "18",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 198,
            "description": "Copying media thumbnail failed.",
            "itemtype": "property",
            "name": "COPY_THUMB",
            "type": "Number",
            "default": "19",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 208,
            "description": "Defragmentation of the mp4 failed",
            "itemtype": "property",
            "name": "DEFRAGMENTATION",
            "type": "Number",
            "default": "20",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 218,
            "description": "Remove fragmented file",
            "itemtype": "property",
            "name": "UNLINK_FRAGMENTED",
            "type": "Number",
            "default": "21",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 228,
            "description": "Replacing fragmented file",
            "itemtype": "property",
            "name": "",
            "type": "Number",
            "default": "22",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 238,
            "description": "A media with the same file name as already been published.",
            "itemtype": "property",
            "name": "",
            "type": "Number",
            "default": "23",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 248,
            "description": "Merging the media failed while changing state.",
            "itemtype": "property",
            "name": "",
            "type": "Number",
            "default": "24",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 258,
            "description": "Merging the media failed while trying to get a media with the same name.",
            "itemtype": "property",
            "name": "",
            "type": "Number",
            "default": "25",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 268,
            "description": "Merging the media failed while waiting for a media with the same name to have a stable state.",
            "itemtype": "property",
            "name": "",
            "type": "Number",
            "default": "26",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 278,
            "description": "Merging the media failed while changing state of the other media.",
            "itemtype": "property",
            "name": "",
            "type": "Number",
            "default": "27",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 288,
            "description": "Merging the media failed while merging medias.",
            "itemtype": "property",
            "name": "",
            "type": "Number",
            "default": "28",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 298,
            "description": "Merging the media failed while removing the not chosen media.",
            "itemtype": "property",
            "name": "",
            "type": "Number",
            "default": "29",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/packageFactory.js",
            "line": 19,
            "description": "Gets an instance of a Package depending on package file type (factory).",
            "itemtype": "method",
            "name": "get",
            "static": 1,
            "params": [
                {
                    "name": "type",
                    "description": "The type of the package platform to instanciate",
                    "type": "String"
                },
                {
                    "name": "mediaPackage",
                    "description": "Information about the media",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An instance of a Package sub class",
                "type": "Package"
            },
            "class": "factory",
            "module": "packages"
        },
        {
            "file": "app/server/packages/states.js",
            "line": 16,
            "description": "Package is on error.",
            "itemtype": "property",
            "name": "ERROR",
            "type": "Number",
            "default": "0",
            "final": 1,
            "class": "STATES",
            "module": "packages"
        },
        {
            "file": "app/server/packages/states.js",
            "line": 26,
            "description": "Package is in the queue waiting to be processed.",
            "itemtype": "property",
            "name": "PENDING",
            "type": "Number",
            "default": "1",
            "final": 1,
            "class": "STATES",
            "module": "packages"
        },
        {
            "file": "app/server/packages/states.js",
            "line": 36,
            "description": "Package is copying.",
            "itemtype": "property",
            "name": "COPYING",
            "type": "Number",
            "default": "2",
            "final": 1,
            "class": "STATES",
            "module": "packages"
        },
        {
            "file": "app/server/packages/states.js",
            "line": 46,
            "description": "Package is extracting.",
            "itemtype": "property",
            "name": "EXTRACTING",
            "type": "Number",
            "default": "3",
            "final": 1,
            "class": "STATES",
            "module": "packages"
        },
        {
            "file": "app/server/packages/states.js",
            "line": 56,
            "description": "Package is validating.",
            "itemtype": "property",
            "name": "VALIDATING",
            "type": "Number",
            "default": "4",
            "final": 1,
            "class": "STATES",
            "module": "packages"
        },
        {
            "file": "app/server/packages/states.js",
            "line": 66,
            "description": "Package is preparing.",
            "itemtype": "property",
            "name": "PREPARING",
            "type": "Number",
            "default": "5",
            "final": 1,
            "class": "STATES",
            "module": "packages"
        },
        {
            "file": "app/server/packages/states.js",
            "line": 76,
            "description": "Package is waiting for a user action to be uploaded to the platform.",
            "itemtype": "property",
            "name": "WAITING_FOR_UPLOAD",
            "type": "Number",
            "default": "6",
            "final": 1,
            "class": "STATES",
            "module": "packages"
        },
        {
            "file": "app/server/packages/states.js",
            "line": 86,
            "description": "Package is uploading to the platform.",
            "itemtype": "property",
            "name": "UPLOADING",
            "type": "Number",
            "default": "7",
            "final": 1,
            "class": "STATES",
            "module": "packages"
        },
        {
            "file": "app/server/packages/states.js",
            "line": 96,
            "description": "Media information are being synchronized with the platform.",
            "itemtype": "property",
            "name": "SYNCHRONIZING",
            "type": "Number",
            "default": "8",
            "final": 1,
            "class": "STATES",
            "module": "packages"
        },
        {
            "file": "app/server/packages/states.js",
            "line": 106,
            "description": "Package is saving timecodes.",
            "itemtype": "property",
            "name": "SAVING_TIMECODES",
            "type": "Number",
            "default": "9",
            "final": 1,
            "class": "STATES",
            "module": "packages"
        },
        {
            "file": "app/server/packages/states.js",
            "line": 116,
            "description": "Package is copying images.",
            "itemtype": "property",
            "name": "COPYING_IMAGES",
            "type": "Number",
            "default": "10",
            "final": 1,
            "class": "STATES",
            "module": "packages"
        },
        {
            "file": "app/server/packages/states.js",
            "line": 126,
            "description": "Package is processed but not published.",
            "itemtype": "property",
            "name": "READY",
            "type": "Number",
            "default": "11",
            "final": 1,
            "class": "STATES",
            "module": "packages"
        },
        {
            "file": "app/server/packages/states.js",
            "line": 136,
            "description": "Package is processed and published.",
            "itemtype": "property",
            "name": "PUBLISHED",
            "type": "Number",
            "default": "12",
            "final": 1,
            "class": "STATES",
            "module": "packages"
        },
        {
            "file": "app/server/packages/states.js",
            "line": 146,
            "description": "Package is generating thumbnail.",
            "itemtype": "property",
            "name": "GENERATE_THUMB",
            "type": "Number",
            "default": "13",
            "final": 1,
            "class": "STATES",
            "module": "packages"
        },
        {
            "file": "app/server/packages/states.js",
            "line": 156,
            "description": "Package is analyzing media for more information.",
            "itemtype": "property",
            "name": "GET_METADATA",
            "type": "Number",
            "default": "14",
            "final": 1,
            "class": "STATES",
            "module": "packages"
        },
        {
            "file": "app/server/packages/states.js",
            "line": 166,
            "description": "Package is defragmenting the mp4.",
            "type": "Number",
            "default": "15",
            "final": 1,
            "class": "STATES",
            "module": "packages"
        },
        {
            "file": "app/server/packages/states.js",
            "line": 174,
            "description": "Package is merging with another one.",
            "type": "Number",
            "default": "16",
            "final": 1,
            "class": "STATES",
            "module": "packages"
        },
        {
            "file": "app/server/providers/mediaPlatforms/tls/TlsClient.js",
            "line": 41,
            "description": "The authenticate request to get an access token.\n\nAs TLS does not have an authentication request, this is a fake request.",
            "itemtype": "property",
            "name": "authenticateRequest",
            "type": "Object",
            "final": 1,
            "class": "TlsClient",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/tls/TlsClient.js",
            "line": 60,
            "description": "Indicates if client is authenticated to the server.",
            "itemtype": "method",
            "name": "isAuthenticated",
            "return": {
                "description": "true as no authentication is performed on TLS server",
                "type": "Boolean"
            },
            "class": "TlsClient",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/tls/TlsClient.js",
            "line": 70,
            "description": "Builds authentication headers.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getAuthenticationHeader",
            "return": {
                "description": "The authentication headers to send with each request",
                "type": "Object"
            },
            "class": "TlsClient",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/tls/TlsProvider.js",
            "line": 40,
            "description": "The TLS client to interact with TLS web service.",
            "itemtype": "property",
            "name": "client",
            "type": "TlsClient",
            "final": 1,
            "class": "TlsProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/tls/TlsProvider.js",
            "line": 51,
            "description": "The absolute path to the directory containing medias.",
            "itemtype": "property",
            "name": "mediaDirectoryPath",
            "type": "String",
            "final": 1,
            "class": "TlsProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/tls/TlsProvider.js",
            "line": 68,
            "description": "Uploads a media to the TLS platform.\n\nMedia is uploaded on a local directory as OpenVeo and TLS share a common directory through NFS.",
            "itemtype": "method",
            "name": "upload",
            "async": 1,
            "params": [
                {
                    "name": "mediaFilePath",
                    "description": "The absolute path of the media to upload",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **String** The media id",
                    "type": "Function"
                }
            ],
            "class": "TlsProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/tls/TlsProvider.js",
            "line": 106,
            "description": "Gets information about a media hosted by TLS.",
            "itemtype": "method",
            "name": "getMediaInfo",
            "async": 1,
            "params": [
                {
                    "name": "mediaIds",
                    "description": "The list of media ids",
                    "type": "Array"
                },
                {
                    "name": "expectedDefintion",
                    "description": "The expected media definition. This is not use for TLS provider as TLS\ndoesn't transcode medias",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** Information about the media and its resources",
                    "type": "Function"
                }
            ],
            "class": "TlsProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/tls/TlsProvider.js",
            "line": 150,
            "description": "Removes medias from TLS platform.",
            "itemtype": "method",
            "name": "remove",
            "async": 1,
            "params": [
                {
                    "name": "mediaIds",
                    "description": "TLS media ids to remove",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "TlsProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/tls/TlsProvider.js",
            "line": 182,
            "description": "Updates a media resources on the platform.\n\nIf media has several resources on the platform, the same update will be performed for all resources.\nActually only the media title and media custom properties are synchronized with TLS.",
            "itemtype": "method",
            "name": "update",
            "async": 1,
            "params": [
                {
                    "name": "media",
                    "description": "The media",
                    "type": "Object",
                    "props": [
                        {
                            "name": "mediaId",
                            "description": "The list of media resource ids",
                            "type": "Array"
                        }
                    ]
                },
                {
                    "name": "data",
                    "description": "The datas to update",
                    "type": "Object",
                    "props": [
                        {
                            "name": "title",
                            "description": "The media title",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "properties",
                            "description": "The media custom properties with id / value pairs, custom properties corresponding\nto the one in TLS configuration will be updated, others won't",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "force",
                    "description": "true to force the update even if title and properties haven't changed, false otherwise",
                    "type": "Boolean"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "TlsProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/youtube/GoogleOAuthHelper.js",
            "line": 32,
            "description": "Google oauth client library.",
            "itemtype": "property",
            "name": "oauth2Client",
            "type": "OAuth2",
            "final": 1,
            "class": "GoogleOAuthHelper",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/youtube/GoogleOAuthHelper.js",
            "line": 46,
            "description": "Persists the tokens retrieved from Google.",
            "itemtype": "method",
            "name": "saveToken",
            "params": [
                {
                    "name": "tokens",
                    "description": "The tokens retrieved from Google",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "Callback function with:\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** The saved token object",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "GoogleOAuthHelper",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/youtube/GoogleOAuthHelper.js",
            "line": 72,
            "description": "Retrieves the current token or null if it was not persisted earlier.",
            "itemtype": "method",
            "name": "fetchToken",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback function with :\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** The token object",
                    "type": "Function"
                }
            ],
            "class": "GoogleOAuthHelper",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/youtube/GoogleOAuthHelper.js",
            "line": 93,
            "description": "Builds the url that will permit to access google association page on the client's browser.",
            "itemtype": "method",
            "name": "getAuthUrl",
            "params": [
                {
                    "name": "options",
                    "description": "Options to build the url, 'scope' is mandatory",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The url to the google association page",
                "type": "String"
            },
            "class": "GoogleOAuthHelper",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/youtube/GoogleOAuthHelper.js",
            "line": 114,
            "description": "Retrieves a token from google with an authorization code, this token is then saved for later use and can be\nretrieved with @see this.fetchToken.",
            "itemtype": "method",
            "name": "persistTokenWithCode",
            "params": [
                {
                    "name": "code",
                    "description": "The authorization code",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Callback function with :\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** The token object",
                    "type": "Function"
                }
            ],
            "class": "GoogleOAuthHelper",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/youtube/GoogleOAuthHelper.js",
            "line": 137,
            "description": "Checks whether or not a previous token has been retrieved.",
            "itemtype": "method",
            "name": "hasToken",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback function with :\n  - **Error** The error if an error occurred, null otherwise\n  - **Boolean** true a token exists, false otherwise",
                    "type": "Function"
                }
            ],
            "class": "GoogleOAuthHelper",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/youtube/GoogleOAuthHelper.js",
            "line": 151,
            "description": "Retrieves a fresh (=valid) token, if a previous token was set and is still valid it is returned. If this previous\ntoken is not valid anymore a new token is retrieved.\nThis function should be used after a previous successfull google association.",
            "itemtype": "method",
            "name": "getFreshToken",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback function with :\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** The token object",
                    "type": "Function"
                }
            ],
            "class": "GoogleOAuthHelper",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/youtube/YoutubeProvider.js",
            "line": 18,
            "description": "Available upload methods.",
            "itemtype": "property",
            "name": "UPLOAD_METHODS",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "final": 1,
            "class": "YoutubeProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/youtube/YoutubeProvider.js",
            "line": 29,
            "description": "Available privacy statuses.",
            "itemtype": "property",
            "name": "PRIVACY_STATUSES",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "final": 1,
            "class": "YoutubeProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/youtube/YoutubeProvider.js",
            "line": 56,
            "description": "Youtube upload method, uploadClassic or uploadResumable.",
            "itemtype": "property",
            "name": "uploadMethod",
            "type": "String",
            "class": "YoutubeProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/youtube/YoutubeProvider.js",
            "line": 66,
            "description": "Privacy to apply to uploaded medias either public, private or unlisted.",
            "itemtype": "property",
            "name": "privacy",
            "type": "String",
            "class": "YoutubeProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/youtube/YoutubeProvider.js",
            "line": 76,
            "description": "The Google OAuth Helper to use to connect to Google APIs.",
            "itemtype": "property",
            "name": "googleOAuthHelper",
            "type": "GoogleOAuthHelper",
            "class": "YoutubeProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/youtube/YoutubeProvider.js",
            "line": 90,
            "description": "Youtube category ids.",
            "itemtype": "property",
            "name": "CATEGORIES",
            "type": "Object",
            "static": 1,
            "final": 1,
            "class": "YoutubeProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/youtube/YoutubeProvider.js",
            "line": 103,
            "description": "Uploads a media to the Youtube platform.",
            "itemtype": "method",
            "name": "upload",
            "async": 1,
            "params": [
                {
                    "name": "mediaFilePath",
                    "description": "The absolute path of the media to upload",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **String** The media id on the Youtube platform",
                    "type": "Function"
                }
            ],
            "class": "YoutubeProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/youtube/YoutubeProvider.js",
            "line": 130,
            "description": "Uploads to Youtube in the classic way, using Youtube API.",
            "itemtype": "method",
            "name": "uploadClassic",
            "async": 1,
            "params": [
                {
                    "name": "mediaFilePath",
                    "description": "The absolute path to the media to upload",
                    "type": "String"
                },
                {
                    "name": "uploadParams",
                    "description": "Parameters to send to Youtube when calling the API",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "callback function with:\n - **Error** The error if an error occurred, null otherwise\n - **String** The media id on the Youtube platform",
                    "type": "Function"
                }
            ],
            "class": "YoutubeProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/youtube/YoutubeProvider.js",
            "line": 183,
            "description": "Uploads to Youtube in a fail safe way, using resumable uploads.\n\nThe upload can fail 3 times before failing globally, each times it fails it perform an upload again starting where\nit previously failed (ie: not re-uploading all the media)",
            "itemtype": "method",
            "name": "uploadResumable",
            "async": 1,
            "params": [
                {
                    "name": "mediaFilePath",
                    "description": "The absolute path to the media to upload",
                    "type": "String"
                },
                {
                    "name": "uploadParams",
                    "description": "Parameters to send to Youtube when calling the API",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "callback function with:\n - **Error** The error if an error occurred, null otherwise\n - **String** The uploaded media id",
                    "type": "Function"
                }
            ],
            "class": "YoutubeProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/youtube/YoutubeProvider.js",
            "line": 262,
            "description": "Gets information about a media hosted by Youtube.",
            "itemtype": "method",
            "name": "getMediaInfo",
            "async": 1,
            "params": [
                {
                    "name": "mediaId",
                    "description": "The Youtube id of the media",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** Information about the media",
                    "type": "Function"
                }
            ],
            "class": "YoutubeProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/youtube/YoutubeProvider.js",
            "line": 282,
            "description": "Removes a media from the Youtube platform.",
            "itemtype": "method",
            "name": "remove",
            "async": 1,
            "params": [
                {
                    "name": "mediaIds",
                    "description": "Youtube media ids to remove",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "YoutubeProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/youtube/YoutubeProvider.js",
            "line": 331,
            "description": "Updates a media resources on the platform.\n\nIf media has several resources on the platform, the same update will be performed for all resources.\nActually only the media title is synchronized with Youtube.",
            "itemtype": "method",
            "name": "update",
            "async": 1,
            "params": [
                {
                    "name": "media",
                    "description": "The media",
                    "type": "Object",
                    "props": [
                        {
                            "name": "mediaId",
                            "description": "The list of media resource ids",
                            "type": "Array"
                        }
                    ]
                },
                {
                    "name": "data",
                    "description": "The datas to update",
                    "type": "Object",
                    "props": [
                        {
                            "name": "title",
                            "description": "The media title. Be careful only the first 100 characters will be used, also\n\"less than\" and \"greater than\" characters will be removed",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "force",
                    "description": "true to force the update even if title hasn't changed, false otherwise",
                    "type": "Boolean"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "YoutubeProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/youtube/YoutubeResumableUpload.js",
            "line": 22,
            "description": "TODO",
            "itemtype": "property",
            "name": "byteCount",
            "type": "Number",
            "class": "ResumableUpload",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/youtube/YoutubeResumableUpload.js",
            "line": 30,
            "description": "TODO",
            "itemtype": "property",
            "name": "tokens",
            "type": "Object",
            "class": "ResumableUpload",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/youtube/YoutubeResumableUpload.js",
            "line": 38,
            "description": "TODO",
            "itemtype": "property",
            "name": "filepath",
            "type": "String",
            "class": "ResumableUpload",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/youtube/YoutubeResumableUpload.js",
            "line": 46,
            "description": "TODO",
            "itemtype": "property",
            "name": "metadata",
            "type": "Object",
            "class": "ResumableUpload",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/youtube/YoutubeResumableUpload.js",
            "line": 54,
            "description": "TODO",
            "itemtype": "property",
            "name": "retry",
            "type": "Number",
            "class": "ResumableUpload",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/youtube/YoutubeResumableUpload.js",
            "line": 62,
            "description": "TODO",
            "itemtype": "property",
            "name": "host",
            "type": "String",
            "class": "ResumableUpload",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/youtube/YoutubeResumableUpload.js",
            "line": 70,
            "description": "TODO",
            "itemtype": "property",
            "name": "api",
            "type": "String",
            "class": "ResumableUpload",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/youtube/YoutubeResumableUpload.js",
            "line": 78,
            "description": "TODO",
            "itemtype": "property",
            "name": "stats",
            "type": "Object",
            "class": "ResumableUpload",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/youtube/YoutubeResumableUpload.js",
            "line": 90,
            "description": "Inits the upload by POSTing google for an upload URL (saved to self.location).",
            "itemtype": "method",
            "name": "upload",
            "class": "ResumableUpload",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/youtube/YoutubeResumableUpload.js",
            "line": 142,
            "description": "Pipes uploadPipe to self.location (Google's Location header).",
            "itemtype": "method",
            "name": "send",
            "class": "ResumableUpload",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/youtube/YoutubeResumableUpload.js",
            "line": 201,
            "description": "TODO.",
            "itemtype": "method",
            "name": "getProgress",
            "params": [
                {
                    "name": "handler",
                    "description": "TODO"
                }
            ],
            "class": "ResumableUpload",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/LocalProvider.js",
            "line": 31,
            "description": "Uploads a media to the Local platform.",
            "itemtype": "method",
            "name": "upload",
            "async": 1,
            "params": [
                {
                    "name": "mediaFilePath",
                    "description": "The absolute system path of the media to upload",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **String** The media id on the Local platform",
                    "type": "Function"
                }
            ],
            "class": "LocalProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/LocalProvider.js",
            "line": 60,
            "description": "Gets information about a media hosted by Local.",
            "itemtype": "method",
            "name": "getMediaInfo",
            "async": 1,
            "params": [
                {
                    "name": "mediaId",
                    "description": "The local id of the media",
                    "type": "String"
                },
                {
                    "name": "expectedDefintion",
                    "description": "The expected media definition, not used for this provider",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** Information about the media",
                    "type": "Function"
                }
            ],
            "class": "LocalProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/LocalProvider.js",
            "line": 93,
            "description": "Removes a media from the Local platform.",
            "itemtype": "method",
            "name": "remove",
            "async": 1,
            "params": [
                {
                    "name": "mediaIds",
                    "description": "Local media ids to remove",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "LocalProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/MediaPlatformProvider.js",
            "line": 25,
            "description": "The media platform's configuration.",
            "itemtype": "property",
            "name": "conf",
            "type": "Object",
            "final": 1,
            "class": "MediaPlatformProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/MediaPlatformProvider.js",
            "line": 44,
            "itemtype": "property",
            "name": "QUALITIES",
            "type": "Object",
            "static": 1,
            "final": 1,
            "class": "MediaPlatformProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/MediaPlatformProvider.js",
            "line": 57,
            "description": "Uploads a media to the platform.",
            "itemtype": "method",
            "name": "upload",
            "async": 1,
            "params": [
                {
                    "name": "mediaFilePath",
                    "description": "The absolute path of the media to upload",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **String** The media id on the platform",
                    "type": "Function"
                }
            ],
            "class": "MediaPlatformProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/MediaPlatformProvider.js",
            "line": 71,
            "description": "Removes a media from the platform.",
            "itemtype": "method",
            "name": "remove",
            "async": 1,
            "params": [
                {
                    "name": "mediaIds",
                    "description": "Platform media ids to remove",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "MediaPlatformProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/MediaPlatformProvider.js",
            "line": 84,
            "description": "Updates a media on the platform.\n\nDepending on the platform and what is supported on it, some media properties might be updated and others not.\nIf media has several resources on the platform, the same update will be performed on all resources.",
            "itemtype": "method",
            "name": "update",
            "async": 1,
            "params": [
                {
                    "name": "media",
                    "description": "The media",
                    "type": "Object",
                    "props": [
                        {
                            "name": "mediaId",
                            "description": "The list of media resource ids",
                            "type": "Array"
                        }
                    ]
                },
                {
                    "name": "data",
                    "description": "The media datas to update",
                    "type": "Object"
                },
                {
                    "name": "force",
                    "description": "true to force the update even if datas haven't changed, false otherwise",
                    "type": "Boolean"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "MediaPlatformProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/MediaPlatformProvider.js",
            "line": 103,
            "description": "Gets information about a media from the platform.",
            "itemtype": "method",
            "name": "getMediaInfo",
            "async": 1,
            "params": [
                {
                    "name": "mediaId",
                    "description": "The platform id of the media",
                    "type": "String"
                },
                {
                    "name": "expectedDefintion",
                    "description": "The expected media definition",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** Information about the media",
                    "type": "Function"
                }
            ],
            "class": "MediaPlatformProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/VimeoProvider.js",
            "line": 29,
            "description": "Vimeo client library.",
            "itemtype": "property",
            "name": "vimeo",
            "type": "Vimeo",
            "final": 1,
            "class": "VimeoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/VimeoProvider.js",
            "line": 38,
            "description": "List of accepted media qualities.",
            "itemtype": "property",
            "name": "qualitiesMap",
            "type": "Object",
            "final": 1,
            "class": "VimeoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/VimeoProvider.js",
            "line": 59,
            "description": "Uploads a media to the Vimeo platform.",
            "itemtype": "method",
            "name": "upload",
            "async": 1,
            "params": [
                {
                    "name": "mediaFilePath",
                    "description": "The absolute system path of the media to upload",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **String** The media id on the Vimeo platform",
                    "type": "Function"
                }
            ],
            "class": "VimeoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/VimeoProvider.js",
            "line": 125,
            "description": "Gets information about a media hosted by Vimeo.\n\nMedia is considered available if the expected media definition has been transcoded by the media platform.",
            "itemtype": "method",
            "name": "getMediaInfo",
            "async": 1,
            "params": [
                {
                    "name": "mediaId",
                    "description": "The Vimeo id of the media",
                    "type": "String"
                },
                {
                    "name": "expectedDefintion",
                    "description": "The expected media definition",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** Information about the media",
                    "type": "Function"
                }
            ],
            "class": "VimeoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/VimeoProvider.js",
            "line": 205,
            "description": "Removes a media from the Vimeo platform.",
            "itemtype": "method",
            "name": "remove",
            "async": 1,
            "params": [
                {
                    "name": "mediaIds",
                    "description": "Vimeo media ids to remove",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "VimeoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/VimeoProvider.js",
            "line": 242,
            "description": "Updates a media resources on the platform.\n\nIf media has several resources on the platform, the same update will be performed for all resources.\nActually only the media title is synchronized with Vimeo.",
            "itemtype": "method",
            "name": "update",
            "async": 1,
            "params": [
                {
                    "name": "media",
                    "description": "The media",
                    "type": "Object",
                    "props": [
                        {
                            "name": "mediaId",
                            "description": "The list of media resource ids",
                            "type": "Array"
                        }
                    ]
                },
                {
                    "name": "data",
                    "description": "The datas to update",
                    "type": "Object",
                    "props": [
                        {
                            "name": "title",
                            "description": "The media title. Be careful only the first 128 characters will be used. Also HTML tags\nwill be removed",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "force",
                    "description": "true to force the update even if title hasn't changed, false otherwise",
                    "type": "Boolean"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "VimeoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/WowzaProvider.js",
            "line": 32,
            "description": "FTPS client.",
            "itemtype": "property",
            "name": "ftps",
            "type": "FTPS",
            "final": 1,
            "class": "WowzaProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/WowzaProvider.js",
            "line": 68,
            "description": "Uploads a media to the Wowza platform.",
            "itemtype": "method",
            "name": "upload",
            "async": 1,
            "params": [
                {
                    "name": "mediaFilePath",
                    "description": "THe absolute system path of the media to upload",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **String** The media id on the Vimeo platform",
                    "type": "Function"
                }
            ],
            "class": "WowzaProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/WowzaProvider.js",
            "line": 100,
            "description": "Gets information about a media hosted by Wowza.",
            "itemtype": "method",
            "name": "getMediaInfo",
            "async": 1,
            "params": [
                {
                    "name": "mediaId",
                    "description": "The Wowza id of the media",
                    "type": "String"
                },
                {
                    "name": "expectedDefintion",
                    "description": "The expected media definition, not used for this provider",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** Information about the media",
                    "type": "Function"
                }
            ],
            "class": "WowzaProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/WowzaProvider.js",
            "line": 140,
            "description": "Removes a media from the Wowza platform.",
            "itemtype": "method",
            "name": "remove",
            "async": 1,
            "params": [
                {
                    "name": "mediaIds",
                    "description": "Wowza media ids to remove",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "WowzaProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/factory.js",
            "line": 16,
            "description": "Gets an instance of a MediaPlatformProvider giving a type and a configuration object.",
            "itemtype": "method",
            "name": "get",
            "static": 1,
            "params": [
                {
                    "name": "type",
                    "description": "The type of the provider platform to instanciate",
                    "type": "String"
                },
                {
                    "name": "providerConf",
                    "description": "A media platform configuration object, it's structure depend on the provider's type,\nsee extended objects for more information",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An instance of a MediaPlatformProvider sub class",
                "type": "MediaPlatformProvider"
            },
            "throws": {
                "description": "The configuration doesn't satisfy the provider or given type is not available",
                "type": "Error"
            },
            "class": "mediaPlatformFactory",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/types.js",
            "line": 16,
            "description": "Vimeo provider.",
            "itemtype": "property",
            "name": "VIMEO",
            "type": "String",
            "default": "'vimeo'",
            "final": 1,
            "class": "TYPES",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/types.js",
            "line": 26,
            "description": "Youtube provider.",
            "itemtype": "property",
            "name": "YOUTUBE",
            "type": "String",
            "default": "'youtube'",
            "final": 1,
            "class": "TYPES",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/types.js",
            "line": 36,
            "description": "Wowza provider.",
            "itemtype": "property",
            "name": "WOWZA",
            "type": "String",
            "default": "'wowza'",
            "final": 1,
            "class": "TYPES",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/types.js",
            "line": 46,
            "description": "Local provider.",
            "itemtype": "property",
            "name": "LOCAL",
            "type": "String",
            "default": "'local'",
            "final": 1,
            "class": "TYPES",
            "module": "providers"
        },
        {
            "file": "app/server/providers/mediaPlatforms/types.js",
            "line": 56,
            "description": "TLS provider.",
            "itemtype": "property",
            "name": "TLS",
            "type": "String",
            "default": "'tls'",
            "final": 1,
            "class": "TYPES",
            "module": "providers"
        },
        {
            "file": "app/server/providers/PoiProvider.js",
            "line": 29,
            "description": "Adds points of interest.",
            "itemtype": "method",
            "name": "add",
            "async": 1,
            "params": [
                {
                    "name": "pois",
                    "description": "The list of points of interest to store with for each point of interest:\n  - **String** name The point of interest name\n  - **Number** value The point of interest time in milliseconds\n  - **String** [description] The point of interest description\n  - **Object** [poi.file] The file to associate to the point of interest\n    - **String** poi.file.originalName The file original name\n    - **String** poi.file.mimeType The file MIME type\n    - **String** poi.file.fileName The file name\n    - **Number** poi.file.size The file size in Bytes\n    - **String** poi.file.url The file URL\n    - **String** poi.file.path The file path on the file system",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done with:\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The total amount of points of interest inserted\n  - **Array** The list of added points of interest",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "PoiProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/PoiProvider.js",
            "line": 85,
            "description": "Updates a point of interest.",
            "itemtype": "method",
            "name": "updateOne",
            "async": 1,
            "params": [
                {
                    "name": "filter",
                    "description": "Rules to filter the point of interest to update",
                    "type": "ResourceFilter",
                    "optional": true
                },
                {
                    "name": "poi",
                    "description": "The point of interest description object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "value",
                            "description": "The point of interest time in milliseconds",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "name",
                            "description": "The point of interest name",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "description",
                            "description": "The point of interest description",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "file",
                            "description": "The new file to associate to the point of interest replacing the previous one, if null\nthe file is removed",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "originalName",
                                    "description": "The file original name",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "mimeType",
                                    "description": "The file MIME type",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "fileName",
                                    "description": "The file name",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "size",
                                    "description": "The file size in Bytes",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "url",
                                    "description": "The file URL",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "path",
                                    "description": "The file path on the file system",
                                    "type": "String",
                                    "optional": true
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done with:\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** 1 if everything went fine",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "PoiProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/PoiProvider.js",
            "line": 188,
            "description": "Removes points of interest.\n\nFile associated to the points of interest will be removed as well.",
            "itemtype": "method",
            "name": "remove",
            "async": 1,
            "params": [
                {
                    "name": "filter",
                    "description": "Rules to filter points of interest to remove",
                    "type": "ResourceFilter",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done with:\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of removed points of interest",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "PoiProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/PoiProvider.js",
            "line": 265,
            "description": "Creates points of interest indexes.",
            "itemtype": "method",
            "name": "createIndexes",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "Function to call when it's done with:\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "PoiProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/PoiProvider.js",
            "line": 289,
            "description": "Drops an index from database collection.",
            "itemtype": "method",
            "name": "dropIndex",
            "async": 1,
            "params": [
                {
                    "name": "indexName",
                    "description": "The name of the index to drop",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to call when it's done with:\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "PoiProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/PropertyProvider.js",
            "line": 27,
            "description": "Property types.",
            "itemtype": "property",
            "name": "TYPES",
            "type": "Object",
            "static": 1,
            "final": 1,
            "class": "PropertyProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/PropertyProvider.js",
            "line": 43,
            "description": "The list of available property types.",
            "itemtype": "property",
            "name": "availableTypes",
            "type": "Array",
            "static": 1,
            "final": 1,
            "class": "PropertyProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/PropertyProvider.js",
            "line": 59,
            "description": "Adds custom properties.",
            "itemtype": "method",
            "name": "add",
            "async": 1,
            "params": [
                {
                    "name": "customProperties",
                    "description": "The list of custom properties to store with for each custom property:\n  - **String** name The property name\n  - **String** description The property description\n  - **String** type The property type (see PropertyProvider.availableTypes)\n  - **String** [id] The property id, generated if not specified\n  - **Array** [values] The list of values if type is PropertyProvider.TYPES.LIST",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The total amount of properties inserted\n  - **Array** The list of added properties",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "PropertyProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/PropertyProvider.js",
            "line": 103,
            "description": "Updates a custom property.",
            "itemtype": "method",
            "name": "updateOne",
            "async": 1,
            "params": [
                {
                    "name": "filter",
                    "description": "Rules to filter property to update",
                    "type": "ResourceFilter",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "The modifications to perform",
                    "type": "Object",
                    "props": [
                        {
                            "name": "name",
                            "description": "The property name",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "description",
                            "description": "The property description",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "type",
                            "description": "The property type (see PropertyProvider.availableTypes)",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "id",
                            "description": "The property id, generated if not specified",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "values",
                            "description": "The list of values if type is PropertyProvider.TYPES.LIST",
                            "type": "Array",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** 1 if everything went fine",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "PropertyProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/PropertyProvider.js",
            "line": 132,
            "description": "Removes custom properties.\n\nThis will execute publish hook \"PROPERTIES_DELETED\" after removing custom properties with:\n- **Array** The list of removed properties",
            "itemtype": "method",
            "name": "remove",
            "async": 1,
            "params": [
                {
                    "name": "filter",
                    "description": "Rules to filter properties to remove",
                    "type": "ResourceFilter",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of removed properties",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "PropertyProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/PropertyProvider.js",
            "line": 205,
            "description": "Creates properties indexes.",
            "itemtype": "method",
            "name": "createIndexes",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "Function to call when it's done with:\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "PropertyProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/PropertyProvider.js",
            "line": 229,
            "description": "Drops an index from database collection.",
            "itemtype": "method",
            "name": "dropIndex",
            "async": 1,
            "params": [
                {
                    "name": "indexName",
                    "description": "The name of the index to drop",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to call when it's done with:\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "PropertyProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/VideoProvider.js",
            "line": 31,
            "description": "List of pending updates.",
            "itemtype": "property",
            "name": "updateQueue",
            "type": "Array",
            "final": 1,
            "class": "VideoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/VideoProvider.js",
            "line": 40,
            "description": "Indicates if an update is actually running.",
            "itemtype": "property",
            "name": "pendingUpdate",
            "type": "Boolean",
            "final": 1,
            "class": "VideoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/VideoProvider.js",
            "line": 56,
            "description": "Removes a list of directories.",
            "itemtype": "method",
            "name": "removeDirectories",
            "access": "private",
            "tagname": "",
            "async": 1,
            "params": [
                {
                    "name": "directories",
                    "description": "The list of directory paths",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "VideoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/VideoProvider.js",
            "line": 68,
            "description": "Gets the closure to remove the given directory.",
            "params": [
                {
                    "name": "directory",
                    "description": "The path of the directory to remove",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A dedicated function to remove the directory",
                "type": "Function"
            },
            "class": "VideoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/VideoProvider.js",
            "line": 91,
            "description": "Removes all data related to a list of videos.",
            "itemtype": "method",
            "name": "removeAllDataRelatedToVideo",
            "access": "private",
            "tagname": "",
            "async": 1,
            "params": [
                {
                    "name": "videosToRemove",
                    "description": "The list of videos to remove",
                    "type": "Array"
                },
                {
                    "name": "keepRemote",
                    "description": "true to keep the video in the videos platform",
                    "type": "Boolean"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "VideoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/VideoProvider.js",
            "line": 167,
            "description": "Executes an update operation on the given media.\n\nOnly one update operation can be performed at a time. Pending operations\nare added to the queue and executed sequentially.",
            "itemtype": "method",
            "name": "updateMedia",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "id",
                    "description": "The media id",
                    "type": "String"
                },
                {
                    "name": "modifier",
                    "description": "Database modifier",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "Function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of updated items",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "VideoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/VideoProvider.js",
            "line": 184,
            "description": "Executes oldest update in the queue.",
            "class": "VideoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/VideoProvider.js",
            "line": 228,
            "description": "Removes medias.\n\nAll datas associated to the deleted medias will also be deleted.",
            "itemtype": "method",
            "name": "remove",
            "access": "private",
            "tagname": "",
            "async": 1,
            "params": [
                {
                    "name": "filter",
                    "description": "Rules to filter medias to remove",
                    "type": "ResourceFilter",
                    "optional": true
                },
                {
                    "name": "keepRemote",
                    "description": "true to keep the video on the videos platform, false to also remove the video from the\nplatform",
                    "type": "Boolean"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of removed medias",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "VideoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/VideoProvider.js",
            "line": 309,
            "description": "Resolves media point of interest file path.",
            "itemtype": "method",
            "name": "getPoiFilePath",
            "params": [
                {
                    "name": "mediaId",
                    "description": "The media id the point of interest belongs to",
                    "type": "String"
                },
                {
                    "name": "file",
                    "description": "The file information",
                    "type": "Object",
                    "props": [
                        {
                            "name": "mimeType",
                            "description": "The file MIME type",
                            "type": "String"
                        },
                        {
                            "name": "fileName",
                            "description": "The file name",
                            "type": "String"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The resolved file path",
                "type": "String"
            },
            "class": "VideoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/VideoProvider.js",
            "line": 326,
            "description": "Fetches a media.\n\nIf filter corresponds to more than one media, the first found media will be the returned one.\nIf the media point of interest are in percents, needPointsOfInterestUnitConversion property will be added\nto the media.",
            "itemtype": "method",
            "name": "getOne",
            "async": 1,
            "params": [
                {
                    "name": "filter",
                    "description": "Rules to filter medias",
                    "type": "ResourceFilter",
                    "optional": true
                },
                {
                    "name": "fields",
                    "description": "Fields to be included or excluded from the response, by default all\nfields are returned. Only \"exclude\" or \"include\" can be specified, not both",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "include",
                            "description": "The list of fields to include in the response, all other fields are excluded",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "exclude",
                            "description": "The list of fields to exclude from response, all other fields are included. Ignored\nif include is also specified.",
                            "type": "Array",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** The media",
                    "type": "Function"
                }
            ],
            "class": "VideoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/VideoProvider.js",
            "line": 387,
            "description": "Adds medias.",
            "itemtype": "method",
            "name": "add",
            "async": 1,
            "params": [
                {
                    "name": "medias",
                    "description": "The list of medias to store with for each media:\n  - **String** id The media id\n  - **Boolean** [available] true if the media is available, false otherwise\n  - **String** [title] The media title\n  - **String** [leadParagraph] The media lead paragraph\n  - **String** [description] The media description\n  - **Number** [state] The media state (see STATES class from module packages)\n  - **Date** [date] The media date\n  - **String** [type] The id of the associated media platform\n  - **Object** [metadata] Information about the media as a content\n  - **String** [metadata.user] The id of the user the media belongs to\n  - **Array** [metadata.groups] The list of groups the media belongs to\n  - **Number** [errorCode] The media error code (see ERRORS class from module packages)\n  - **String** [category] The id of the category the media belongs to\n  - **Array** [properties] The list of properties values for this media\n  - **String** [packageType] The type of package\n  - **String** [lastState] The last media state in publication process\n  - **String** [lastTransition] The last media transition in publication process\n  - **String** [originalPackagePath] Absolute path of the original package\n  - **String** [originalFileName] Original package name without the extension\n  - **Array** [mediaId] The list of medias in the media platform. Could have several media ids if media has\n    multiple sources\n  - **Array** [timecodes] The list of media timecodes\n  - **Array** [chapters] The list of media chapters\n  - **Array** [tags] The list of media tags\n  - **Array** [cut] Media begin and end cuts\n  - **Array** [sources] The list of media sources\n  - **Number** [views=0] The statistic number of views\n  - **String** [thumbnail] The media thumbnail URI\n  - **String** [link] The media link in OpenVeo",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The total amount of medias inserted\n  - **Array** The list of added medias",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "VideoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/VideoProvider.js",
            "line": 473,
            "description": "Updates video state.",
            "itemtype": "method",
            "name": "updateState",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the video to update",
                    "type": "Number"
                },
                {
                    "name": "state",
                    "description": "The state of the video",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of updated items",
                    "type": "Function"
                }
            ],
            "class": "VideoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/VideoProvider.js",
            "line": 488,
            "description": "Updates last video state.",
            "itemtype": "method",
            "name": "updateLastState",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the video to update",
                    "type": "Number"
                },
                {
                    "name": "state",
                    "description": "The last state of the video",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of updated items",
                    "type": "Function"
                }
            ],
            "class": "VideoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/VideoProvider.js",
            "line": 503,
            "description": "Updates last video transition.",
            "itemtype": "method",
            "name": "updateLastTransition",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the video to update",
                    "type": "Number"
                },
                {
                    "name": "state",
                    "description": "The last transition of the video",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of updated items",
                    "type": "Function"
                }
            ],
            "class": "VideoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/VideoProvider.js",
            "line": 518,
            "description": "Updates video error code.",
            "itemtype": "method",
            "name": "updateErrorCode",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the video to update",
                    "type": "Number"
                },
                {
                    "name": "errorCode",
                    "description": "The error code of the video",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of updated items",
                    "type": "Function"
                }
            ],
            "class": "VideoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/VideoProvider.js",
            "line": 533,
            "description": "Updates video link.",
            "itemtype": "method",
            "name": "updateLink",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the video to update",
                    "type": "Number"
                },
                {
                    "name": "link",
                    "description": "The link of the video",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of updated items",
                    "type": "Function"
                }
            ],
            "class": "VideoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/VideoProvider.js",
            "line": 548,
            "description": "Updates media id for media platform.",
            "itemtype": "method",
            "name": "updateMediaId",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the media to update",
                    "type": "String"
                },
                {
                    "name": "idMediaPlatform",
                    "description": "The id of the media in the video platform",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of updated items",
                    "type": "Function"
                }
            ],
            "class": "VideoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/VideoProvider.js",
            "line": 563,
            "description": "Updates video metadata for video platform.",
            "itemtype": "method",
            "name": "updateMetadata",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the video to update",
                    "type": "Number"
                },
                {
                    "name": "metadata",
                    "description": "The metadata of the video in the video platform",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of updated items",
                    "type": "Function"
                }
            ],
            "class": "VideoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/VideoProvider.js",
            "line": 578,
            "description": "Updates video date timestamp.",
            "itemtype": "method",
            "name": "updateDate",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the video to update",
                    "type": "Number"
                },
                {
                    "name": "date",
                    "description": "The date of the video",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of updated items",
                    "type": "Function"
                }
            ],
            "class": "VideoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/VideoProvider.js",
            "line": 593,
            "description": "Updates video category for video platform.",
            "itemtype": "method",
            "name": "updateCategory",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the video to update",
                    "type": "Number"
                },
                {
                    "name": "category",
                    "description": "The category id of the video in the video platform",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of updated items",
                    "type": "Function"
                }
            ],
            "class": "VideoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/VideoProvider.js",
            "line": 608,
            "description": "Updates video platform type.",
            "itemtype": "method",
            "name": "updateType",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the video to update",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "The type of the video platform",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of updated items",
                    "type": "Function"
                }
            ],
            "class": "VideoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/VideoProvider.js",
            "line": 623,
            "description": "Updates video thumbnail.",
            "itemtype": "method",
            "name": "updateThumbnail",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the video to update",
                    "type": "Number"
                },
                {
                    "name": "path",
                    "description": "The path of the thumbnail file",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of updated items",
                    "type": "Function"
                }
            ],
            "class": "VideoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/VideoProvider.js",
            "line": 638,
            "description": "Updates video title.",
            "itemtype": "method",
            "name": "updateTitle",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the video to update",
                    "type": "Number"
                },
                {
                    "name": "title",
                    "description": "The video title",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of updated items",
                    "type": "Function"
                }
            ],
            "class": "VideoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/VideoProvider.js",
            "line": 653,
            "description": "Removes medias.\n\nAll datas associated to the deleted medias will also be deleted.",
            "itemtype": "method",
            "name": "remove",
            "async": 1,
            "params": [
                {
                    "name": "filter",
                    "description": "Rules to filter medias to remove",
                    "type": "ResourceFilter",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of removed medias",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "VideoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/VideoProvider.js",
            "line": 669,
            "description": "Removes medias from OpenVeo but keep videos on the videos platform.\n\nAll datas associated to the deleted medias will also be deleted.",
            "itemtype": "method",
            "name": "removeLocal",
            "async": 1,
            "params": [
                {
                    "name": "filter",
                    "description": "Rules to filter medias to remove",
                    "type": "ResourceFilter",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of removed medias",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "VideoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/VideoProvider.js",
            "line": 685,
            "description": "Updates a media.",
            "itemtype": "method",
            "name": "updateOne",
            "async": 1,
            "params": [
                {
                    "name": "filter",
                    "description": "Rules to filter the media to update",
                    "type": "ResourceFilter",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "The modifications to perform\n  - **String** [data.title] The media title\n  - **Date** [data.date] The media date\n  - **String** [data.leadParagraph] The media lead paragraph\n  - **String** [data.description] The media description\n  - **Array** [data.properties] The list of properties values for this media\n  - **String** [data.category] The id of the category the media belongs to\n  - **Array** [data.cut] Media begin and end cuts\n  - **Array** [data.timecodes] The list of media timecodes\n  - **Array** [data.chapters] The list of media chapters\n  - **Array** [data.tags] The list of media tags\n  - **Number** [data.views=0] The statistic number of views\n  - **String** [data.thumbnail] The media thumbnail URI\n  - **Array** [data.sources] The list of media sources\n  - **Array** [data.groups] The list of groups ids the media belongs to\n  - **String** [data.user] The user id the media belongs to\n  - **Boolean** [available] true if the media is available, false otherwise\n  - **Number** [state] The media state (see STATES class from module packages)\n  - **Date** [date] The media date\n  - **String** [type] The id of the associated media platform\n  - **Object** [metadata] Information about the media as a content\n  - **Number** [errorCode] The media error code (see ERRORS class from module packages)\n  - **String** [packageType] The type of package\n  - **String** [lastState] The last media state in publication process\n  - **String** [lastTransition] The last media transition in publication process\n  - **Array** [mediaId] The list of medias in the media platform. Could have several media ids if media has\n    multiple sources\n  - **String** [link] The media link in OpenVeo",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** 1 if everything went fine",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "VideoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/VideoProvider.js",
            "line": 766,
            "description": "Creates videos indexes.",
            "itemtype": "method",
            "name": "createIndexes",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "Function to call when it's done with:\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "VideoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/VideoProvider.js",
            "line": 801,
            "description": "Drops an index from database collection.",
            "itemtype": "method",
            "name": "dropIndex",
            "async": 1,
            "params": [
                {
                    "name": "indexName",
                    "description": "The name of the index to drop",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to call when it's done with:\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "VideoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/watcher/DirectoryFsWatcher.js",
            "line": 13,
            "description": "Fired when an error occurred.",
            "itemtype": "event",
            "name": "error",
            "params": [
                {
                    "name": "The",
                    "description": "error",
                    "type": "WatcherError"
                }
            ],
            "class": "DirectoryFsWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryFsWatcher.js",
            "line": 20,
            "description": "Fired when a new resource (file or directory) has been added to the directory.",
            "itemtype": "event",
            "name": "create",
            "params": [
                {
                    "name": "Path",
                    "description": "of the added resource",
                    "type": "String"
                }
            ],
            "class": "DirectoryFsWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryFsWatcher.js",
            "line": 27,
            "description": "Fired when a resource (file or directory) has been deleted from the directory.",
            "itemtype": "event",
            "name": "delete",
            "params": [
                {
                    "name": "Path",
                    "description": "of the resource before it has been removed",
                    "type": "String"
                }
            ],
            "class": "DirectoryFsWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryFsWatcher.js",
            "line": 66,
            "description": "The absolute path of the watched directory.",
            "itemtype": "property",
            "name": "directoryPath",
            "type": "String",
            "final": 1,
            "class": "DirectoryFsWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryFsWatcher.js",
            "line": 77,
            "description": "Watcher options.",
            "itemtype": "property",
            "name": "options",
            "type": "Object",
            "final": 1,
            "class": "DirectoryFsWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryFsWatcher.js",
            "line": 88,
            "description": "The number of \"rename\" events which haven't been treated yet.",
            "itemtype": "property",
            "name": "pendingEventsCounter",
            "type": "Number",
            "class": "DirectoryFsWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryFsWatcher.js",
            "line": 99,
            "description": "The resources inside the directory with the resource path as the key and true as the value.\n\nThe snapshot represents the current content of the directory and will be updated after each \"rename\" event.",
            "itemtype": "property",
            "name": "snapshot",
            "type": "Object",
            "class": "DirectoryFsWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryFsWatcher.js",
            "line": 112,
            "description": "The Node.js directory watcher.",
            "itemtype": "property",
            "name": "fsWatcher",
            "type": "fs.FSWatcher",
            "class": "DirectoryFsWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryFsWatcher.js",
            "line": 129,
            "description": "Waits for the resource to be fully written.",
            "itemtype": "method",
            "name": "awaitWriteFinish",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "resourcePath",
                    "description": "The absolute path of the resource to wait for",
                    "type": "String"
                },
                {
                    "name": "lastStat",
                    "description": "Last information about the resource",
                    "type": "fs.Stats",
                    "optional": true
                }
            ],
            "class": "DirectoryFsWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryFsWatcher.js",
            "line": 165,
            "description": "Interprets a \"rename\" event.\n\nIf \"rename\" event corresponds to an addition, a \"create\" event will be fired.\nIf \"rename\" event corresponds to a removal, a \"delete\" event will be fired.",
            "itemtype": "method",
            "name": "interpretRename",
            "access": "private",
            "tagname": "",
            "async": 1,
            "class": "DirectoryFsWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryFsWatcher.js",
            "line": 222,
            "description": "Watches the directory.",
            "itemtype": "method",
            "name": "watch",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "The function to call when its starts listening to changes\n - **Error** An error if something went wrong",
                    "type": "Function"
                }
            ],
            "class": "DirectoryFsWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryFsWatcher.js",
            "line": 269,
            "description": "Stops watching the directory.",
            "itemtype": "method",
            "name": "close",
            "class": "DirectoryFsWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryWatcher.js",
            "line": 16,
            "description": "Fired when an error occurred.",
            "itemtype": "event",
            "name": "error",
            "params": [
                {
                    "name": "The",
                    "description": "error",
                    "type": "WatcherError"
                }
            ],
            "class": "DirectoryWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryWatcher.js",
            "line": 23,
            "description": "Fired when a new resource (file or directory) has been added to the watched folder.",
            "itemtype": "event",
            "name": "create",
            "params": [
                {
                    "name": "Path",
                    "description": "of the added resource",
                    "type": "String"
                }
            ],
            "class": "DirectoryWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryWatcher.js",
            "line": 30,
            "description": "Fired when a resource (file or directory) has been deleted from the watched folder.",
            "itemtype": "event",
            "name": "delete",
            "params": [
                {
                    "name": "Path",
                    "description": "of the resource before it has been removed",
                    "type": "String"
                }
            ],
            "class": "DirectoryWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryWatcher.js",
            "line": 37,
            "description": "Fired when a directory is added to the watched directory.\n\nFired after \"create\" event in case the directory is added to the watched directory.",
            "itemtype": "event",
            "name": "watch",
            "params": [
                {
                    "name": "Path",
                    "description": "of the directory",
                    "type": "String"
                }
            ],
            "class": "DirectoryWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryWatcher.js",
            "line": 59,
            "description": "The absolute path of the watched directory.",
            "itemtype": "property",
            "name": "directoryPath",
            "type": "String",
            "final": 1,
            "class": "DirectoryWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryWatcher.js",
            "line": 70,
            "description": "List of watchers for this directory and its sub directories.",
            "itemtype": "property",
            "name": "fsWatchers",
            "type": "Array",
            "final": 1,
            "class": "DirectoryWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryWatcher.js",
            "line": 81,
            "description": "Watcher options.",
            "itemtype": "property",
            "name": "options",
            "type": "Object",
            "final": 1,
            "class": "DirectoryWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryWatcher.js",
            "line": 98,
            "description": "Checks if a sub directory is actually being watched.",
            "itemtype": "method",
            "name": "isWatched",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "directoryPath",
                    "description": "The absolute path of the directory to check",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if directory is actually being watched, false otherwise",
                "type": "Boolean"
            },
            "class": "DirectoryWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryWatcher.js",
            "line": 117,
            "description": "Creates a watcher on the given directory.",
            "itemtype": "method",
            "name": "createWatcher",
            "access": "private",
            "tagname": "",
            "async": 1,
            "params": [
                {
                    "name": "directoryPath",
                    "description": "The absolute path of the directory to watch",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when its done\n - **Error** An error if something went wrong",
                    "type": "Function"
                }
            ],
            "class": "DirectoryWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryWatcher.js",
            "line": 173,
            "description": "Watches a directory and all its sub directories.",
            "itemtype": "method",
            "name": "watch",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "The function to call when its done\n - **Error** An error if something went wrong",
                    "type": "Function"
                }
            ],
            "class": "DirectoryWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryWatcher.js",
            "line": 212,
            "description": "Stops watching the directory and all its sub directories.",
            "itemtype": "method",
            "name": "close",
            "params": [
                {
                    "name": "directoryPath",
                    "description": "Absolute path of the directory to stop watching. If not specified\nthe directory and all its sub directories won't be watched anymore",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "DirectoryWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/Watcher.js",
            "line": 13,
            "description": "Fired when an error occurred.",
            "itemtype": "event",
            "name": "error",
            "params": [
                {
                    "name": "The",
                    "description": "error",
                    "type": "WatcherError"
                }
            ],
            "class": "Watcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/Watcher.js",
            "line": 20,
            "description": "Fired when a new resource (file or directory) has been added to one of the watched folders.",
            "itemtype": "event",
            "name": "create",
            "params": [
                {
                    "name": "Path",
                    "description": "of the added resource",
                    "type": "String"
                }
            ],
            "class": "Watcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/Watcher.js",
            "line": 27,
            "description": "Fired when a resource (file or directory) has been deleted from one of the watched folders.",
            "itemtype": "event",
            "name": "delete",
            "params": [
                {
                    "name": "Path",
                    "description": "of the resource before it has been removed",
                    "type": "String"
                }
            ],
            "class": "Watcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/Watcher.js",
            "line": 34,
            "description": "Fired when a directory is added to watched directories.\n\nFired after \"create\" event in case the directory is added to an already watched directory.",
            "itemtype": "event",
            "name": "watch",
            "params": [
                {
                    "name": "Path",
                    "description": "of the directory",
                    "type": "String"
                }
            ],
            "class": "Watcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/Watcher.js",
            "line": 90,
            "description": "The list of directories' watchers actually running.",
            "itemtype": "property",
            "name": "directoriesWatchers",
            "type": "Array",
            "final": 1,
            "class": "Watcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/Watcher.js",
            "line": 101,
            "description": "Watcher options.",
            "itemtype": "property",
            "name": "options",
            "type": "Object",
            "final": 1,
            "class": "Watcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/Watcher.js",
            "line": 118,
            "description": "Checks if a directory is actually being watched.",
            "itemtype": "method",
            "name": "isWatched",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "directoryPath",
                    "description": "The absolute path of the directory to check",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if directory is actually being watched, false otherwise",
                "type": "Boolean"
            },
            "class": "Watcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/Watcher.js",
            "line": 137,
            "description": "Adds new directories to watch.",
            "itemtype": "method",
            "name": "add",
            "async": 1,
            "params": [
                {
                    "name": "directoriesPaths",
                    "description": "The list of absolute directories paths to watch",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when directories are being watched\n - **Array** The list of results with a property \"error\" if something went wrong",
                    "type": "Function"
                }
            ],
            "class": "Watcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/Watcher.js",
            "line": 185,
            "description": "Stops watching directories.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "directoriesPaths",
                    "description": "The list of absolute directories' paths to stop watching. If no directories are\nspecified all watching directories won't be watched anymore",
                    "type": "Array",
                    "optional": true
                }
            ],
            "class": "Watcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/WatcherError.js",
            "line": 24,
            "description": "The fs.FSWatcher's error code.",
            "itemtype": "property",
            "name": "code",
            "type": "String",
            "final": 1,
            "class": "WatcherError",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/WatcherError.js",
            "line": 33,
            "description": "The absolute path of the watched directory the error belongs to.",
            "itemtype": "property",
            "name": "directoryPath",
            "type": "String",
            "final": 1,
            "class": "WatcherError",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/WatcherError.js",
            "line": 42,
            "description": "Error message.",
            "itemtype": "property",
            "name": "message",
            "type": "String",
            "class": "WatcherError",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/WatcherError.js",
            "line": 50,
            "description": "Error name.",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "class": "WatcherError",
            "module": "watcher"
        },
        {
            "file": "app/server/PublishError.js",
            "line": 23,
            "description": "The publish manager error code.",
            "itemtype": "property",
            "name": "code",
            "type": "String",
            "final": 1,
            "class": "PublishError",
            "module": "publish"
        },
        {
            "file": "app/server/PublishError.js",
            "line": 32,
            "description": "Error message.",
            "itemtype": "property",
            "name": "message",
            "type": "String",
            "final": 1,
            "class": "PublishError",
            "module": "publish"
        },
        {
            "file": "app/server/PublishError.js",
            "line": 41,
            "description": "Error name.",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "final": 1,
            "class": "PublishError",
            "module": "publish"
        },
        {
            "file": "app/server/PublishManager.js",
            "line": 21,
            "description": "Fired when an error occurred while processing a package.",
            "itemtype": "event",
            "name": "error",
            "params": [
                {
                    "name": "The",
                    "description": "error",
                    "type": "Error"
                }
            ],
            "class": "PublishManager",
            "module": "publish"
        },
        {
            "file": "app/server/PublishManager.js",
            "line": 28,
            "description": "Fired when a package process has succeed.",
            "itemtype": "event",
            "name": "complete",
            "params": [
                {
                    "name": "The",
                    "description": "processed package",
                    "type": "Object"
                }
            ],
            "class": "PublishManager",
            "module": "publish"
        },
        {
            "file": "app/server/PublishManager.js",
            "line": 35,
            "description": "Fired when a media in error restarts.",
            "itemtype": "event",
            "name": "retry",
            "params": [
                {
                    "name": "The",
                    "description": "media",
                    "type": "Object"
                }
            ],
            "class": "PublishManager",
            "module": "publish"
        },
        {
            "file": "app/server/PublishManager.js",
            "line": 42,
            "description": "Fired when a media stuck in \"waiting for upload\" state starts uploading.",
            "itemtype": "event",
            "name": "upload",
            "params": [
                {
                    "name": "The",
                    "description": "media",
                    "type": "Object"
                }
            ],
            "class": "PublishManager",
            "module": "publish"
        },
        {
            "file": "app/server/PublishManager.js",
            "line": 49,
            "description": "Fired when media state has changed.",
            "itemtype": "event",
            "name": "stateChanged",
            "params": [
                {
                    "name": "The",
                    "description": "media",
                    "type": "Object"
                }
            ],
            "class": "PublishManager",
            "module": "publish"
        },
        {
            "file": "app/server/PublishManager.js",
            "line": 106,
            "description": "Medias waiting to be processed.",
            "itemtype": "property",
            "name": "queue",
            "type": "Array",
            "final": 1,
            "class": "PublishManager",
            "module": "publish"
        },
        {
            "file": "app/server/PublishManager.js",
            "line": 115,
            "description": "Medias being processed.",
            "itemtype": "property",
            "name": "pendingPackages",
            "type": "Array",
            "final": 1,
            "class": "PublishManager",
            "module": "publish"
        },
        {
            "file": "app/server/PublishManager.js",
            "line": 124,
            "description": "Media provider.",
            "itemtype": "property",
            "name": "videoProvider",
            "type": "VideoProvider",
            "final": 1,
            "class": "PublishManager",
            "module": "publish"
        },
        {
            "file": "app/server/PublishManager.js",
            "line": 133,
            "description": "Maximum number of medias to treat in parallel.",
            "itemtype": "property",
            "name": "maxConcurrentPackage",
            "type": "Number",
            "final": 1,
            "class": "PublishManager",
            "module": "publish"
        },
        {
            "file": "app/server/PublishManager.js",
            "line": 148,
            "description": "Removes a media from pending medias.",
            "itemtype": "method",
            "name": "removeFromPending",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "mediaPackage",
                    "description": "The media package to remove",
                    "type": "Object"
                }
            ],
            "class": "PublishManager",
            "module": "publish"
        },
        {
            "file": "app/server/PublishManager.js",
            "line": 172,
            "description": "Handles media error event.",
            "itemtype": "method",
            "name": "onError",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "error",
                    "description": "The error",
                    "type": "Error"
                },
                {
                    "name": "mediaPackage",
                    "description": "The media on error",
                    "type": "Object"
                }
            ],
            "class": "PublishManager",
            "module": "publish"
        },
        {
            "file": "app/server/PublishManager.js",
            "line": 196,
            "description": "Handles media complete event.",
            "itemtype": "method",
            "name": "onComplete",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "mediaPackage",
                    "description": "The package on error",
                    "type": "Object"
                }
            ],
            "class": "PublishManager",
            "module": "publish"
        },
        {
            "file": "app/server/PublishManager.js",
            "line": 215,
            "description": "Creates a media package manager corresponding to the media type.",
            "itemtype": "method",
            "name": "createMediaPackageManager",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "mediaPackage",
                    "description": "The media to manage",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A media package manager",
                "type": "Package"
            },
            "class": "PublishManager",
            "module": "publish"
        },
        {
            "file": "app/server/PublishManager.js",
            "line": 245,
            "description": "Adds media package to the list of pending packages.",
            "itemtype": "method",
            "name": "addPackage",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "mediaPackage",
                    "description": "The media package to add to pending packages",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true if the media package is successfully added to pending packages\nfalse if it has been added to queue",
                "type": "Boolean"
            },
            "class": "PublishManager",
            "module": "publish"
        },
        {
            "file": "app/server/PublishManager.js",
            "line": 279,
            "description": "Gets an instance of the PublishManager.",
            "itemtype": "method",
            "name": "get",
            "static": 1,
            "params": [
                {
                    "name": "videoProvider",
                    "description": "The media provider",
                    "type": "VideoProvider"
                },
                {
                    "name": "maxConcurrentPackage",
                    "description": "The maximum number of medias to treat in parallel",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The PublishManager singleton instance",
                "type": "PublishManager"
            },
            "class": "PublishManager",
            "module": "publish"
        },
        {
            "file": "app/server/PublishManager.js",
            "line": 295,
            "description": "Publishes the given media package.\n\nMedia package must be of one of the supported type.",
            "itemtype": "method",
            "name": "publish",
            "params": [
                {
                    "name": "mediaPackage",
                    "description": "Media to publish",
                    "type": "Object",
                    "props": [
                        {
                            "name": "originalPackagePath",
                            "description": "Package absolute path",
                            "type": "String"
                        },
                        {
                            "name": "packageType",
                            "description": "The package type",
                            "type": "String"
                        },
                        {
                            "name": "title",
                            "description": "The title to use for this media, default to the file name without extension",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "PublishManager",
            "module": "publish"
        },
        {
            "file": "app/server/PublishManager.js",
            "line": 359,
            "description": "Retries publishing a media package which is on error.",
            "itemtype": "method",
            "name": "retry",
            "params": [
                {
                    "name": "packageId",
                    "description": "The id of the package on error",
                    "type": "String"
                },
                {
                    "name": "forceRetry",
                    "description": "Force retrying a package no matter its state",
                    "type": "Boolean"
                }
            ],
            "class": "PublishManager",
            "module": "publish"
        },
        {
            "file": "app/server/PublishManager.js",
            "line": 417,
            "description": "Retries publishing all packages in a non stable state.\n\nStable states are :\n- STATES.ERROR\n- STATES.WAITING_FOR_UPLOAD\n- STATES.READY\n- STATES.PUBLISHED",
            "itemtype": "method",
            "name": "retryAll",
            "class": "PublishManager",
            "module": "publish"
        },
        {
            "file": "app/server/PublishManager.js",
            "line": 465,
            "description": "Uploads a media blocked in \"waiting to upload\" state.",
            "itemtype": "method",
            "name": "upload",
            "params": [
                {
                    "name": "packageId",
                    "description": "The id of the package waiting to be uploaded",
                    "type": "String"
                },
                {
                    "name": "platform",
                    "description": "The type of the video platform to upload to",
                    "type": "String"
                }
            ],
            "class": "PublishManager",
            "module": "publish"
        },
        {
            "file": "app/server/PublishPlugin.js",
            "line": 36,
            "description": "Publish public router.",
            "itemtype": "property",
            "name": "router",
            "type": "Router",
            "final": 1,
            "class": "PublishPlugin",
            "module": "publish"
        },
        {
            "file": "app/server/PublishPlugin.js",
            "line": 45,
            "description": "Publish private router.",
            "itemtype": "property",
            "name": "router",
            "type": "Router",
            "final": 1,
            "class": "PublishPlugin",
            "module": "publish"
        },
        {
            "file": "app/server/PublishPlugin.js",
            "line": 54,
            "description": "Publish web service router.",
            "itemtype": "property",
            "name": "router",
            "type": "Router",
            "final": 1,
            "class": "PublishPlugin",
            "module": "publish"
        },
        {
            "file": "app/server/PublishPlugin.js",
            "line": 63,
            "description": "Publish APIs.",
            "itemtype": "property",
            "name": "api",
            "type": "PluginApi",
            "final": 1,
            "class": "PublishPlugin",
            "module": "publish"
        },
        {
            "file": "app/server/PublishPlugin.js",
            "line": 78,
            "description": "Sets listeners on events.",
            "itemtype": "method",
            "name": "setListeners",
            "access": "private",
            "tagname": "",
            "class": "PublishPlugin",
            "module": "publish"
        },
        {
            "file": "app/server/PublishPlugin.js",
            "line": 94,
            "description": "Prepares plugin by creating required database indexes.\n\nThis is automatically called by core application after plugin is loaded.",
            "itemtype": "method",
            "name": "init",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "Function to call when it's done with :\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "PublishPlugin",
            "module": "publish"
        },
        {
            "file": "app/server/PublishPlugin.js",
            "line": 129,
            "description": "Starts the watcher when plugin is ready.\n\nThis is automatically called by core application after plugin is initialized.\n\nTODO: When a cache mechanism will be implemented, Publish settings will have to be pulled from cache.",
            "itemtype": "method",
            "name": "start",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "Function to call when it's done with :\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "PublishPlugin",
            "module": "publish"
        },
        {
            "file": "app/server/PublishPluginApi.js",
            "line": 25,
            "description": "Gets publish hooks.",
            "itemtype": "method",
            "name": "getHooks",
            "return": {
                "description": "The publish hooks",
                "type": "Object"
            },
            "class": "PublishPluginApi",
            "module": "publish"
        },
        {
            "file": "app/server/hooks.js",
            "line": 24,
            "description": "One or several properties have been deleted.\n\nWith:\n- **Array** The list of deleted properties ids\n- **Function** The function to call when action is done",
            "itemtype": "property",
            "name": "PROPERTIES_DELETED",
            "type": "String",
            "default": "'properties.deleted'",
            "final": 1,
            "class": "PUBLISH_HOOKS",
            "module": "publish"
        },
        {
            "file": "app/server/hooks.js",
            "line": 38,
            "description": "One or several medias have been deleted.\n\nWith:\n- **Array** The list of deleted medias\n- **Function** The function to call when action is done",
            "itemtype": "property",
            "name": "MEDIAS_DELETED",
            "type": "String",
            "default": "'medias.deleted'",
            "final": 1,
            "class": "PUBLISH_HOOKS",
            "module": "publish"
        },
        {
            "file": "app/server/listener.js",
            "line": 20,
            "description": "Handles event when users have been deleted.\n\nVideos belonging to these users have to be anonymized.\nIf one of the removed users is the one choosed as the default user for the watcher,\nit must be reset to the anonymous user.",
            "itemtype": "method",
            "name": "onUsersDeleted",
            "static": 1,
            "params": [
                {
                    "name": "The",
                    "description": "list of deleted user ids",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "Function to call when it's done\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "listener",
            "module": "publish"
        },
        {
            "file": "app/server/listener.js",
            "line": 100,
            "description": "Handles event when custom properties have been deleted.\n\nRemove custom properties referenced in videos.",
            "itemtype": "method",
            "name": "onPropertiesDeleted",
            "static": 1,
            "params": [
                {
                    "name": "ids",
                    "description": "The list of deleted properties ids",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "Function to call when it's done\n - **Error** An error if something went wrong, null otherwise\n - **Number** The number of updated medias",
                    "type": "Function"
                }
            ],
            "class": "listener",
            "module": "publish"
        },
        {
            "file": "app/server/listener.js",
            "line": 125,
            "description": "Handles event when groups have been deleted.\n\nIf one of the removed groups is the one choosed as the default group for the watcher,\nit must be reset.",
            "itemtype": "method",
            "name": "onGroupsDeleted",
            "static": 1,
            "params": [
                {
                    "name": "The",
                    "description": "list of deleted groups ids",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "Function to call when it's done\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "listener",
            "module": "publish"
        },
        {
            "file": "app/server/listener.js",
            "line": 163,
            "description": "Handles event when medias have been deleted.\n\nRemove points of interest related to the media.",
            "itemtype": "method",
            "name": "onMediasDeleted",
            "static": 1,
            "params": [
                {
                    "name": "medias",
                    "description": "The list of deleted medias",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "Function to call when it's done with:\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "listener",
            "module": "publish"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nResolves medias resources urls using CDN url.\n\nMedias may have attached resources like files associated to tags, timecodes images, thumbnail image and\nso on. These resources must be accessible through an url. As all resources must, in the future, reside in\na CDN, resolveResourcesUrls transforms all resources URIs to URLs based on CDN.",
            "line": " app/server/controllers/VideoController.js:46"
        },
        {
            "message": "Missing item type\nPackage is defragmenting the mp4.",
            "line": " app/server/packages/states.js:166"
        },
        {
            "message": "Missing item type\nPackage is merging with another one.",
            "line": " app/server/packages/states.js:174"
        },
        {
            "message": "Missing item type\nGets the closure to remove the given directory.",
            "line": " app/server/providers/VideoProvider.js:68"
        },
        {
            "message": "Missing item type\nExecutes oldest update in the queue.",
            "line": " app/server/providers/VideoProvider.js:184"
        }
    ]
}